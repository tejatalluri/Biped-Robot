
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000011  00800060  00800060  00000866  2**0
                  ALLOC
  2 .stab         00000e04  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000846  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__vector_6>
   e:	3b c0       	rjmp	.+118    	; 0x86 <__vector_7>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 37       	cpi	r26, 0x71	; 113
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	fe d0       	rcall	.+508    	; 0x240 <main>
  44:	d4 c3       	rjmp	.+1960   	; 0x7ee <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <servo_init>:
int i;   
unsigned char m0h,m0l,m1h,m1l,m2h,m2l,m3h,m3l,x,y,m4h,m4l,m5h,m5l;
unsigned char temp;
void servo_init()
{
TCCR1A=0x03;
  48:	83 e0       	ldi	r24, 0x03	; 3
  4a:	8f bd       	out	0x2f, r24	; 47
TCCR1B=0x1A;
  4c:	8a e1       	ldi	r24, 0x1A	; 26
  4e:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x00;
  50:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
  52:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
  54:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
  56:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x19;
  58:	89 e1       	ldi	r24, 0x19	; 25
  5a:	8b bd       	out	0x2b, r24	; 43
OCR1AL=0xC8;
  5c:	88 ec       	ldi	r24, 0xC8	; 200
  5e:	8a bd       	out	0x2a, r24	; 42
//OCR1BH=0x0f;
//OCR1BL=0xA0;
TIMSK=0x18;  
  60:	88 e1       	ldi	r24, 0x18	; 24
  62:	89 bf       	out	0x39, r24	; 57
DDRB=0x3f;
  64:	8f e3       	ldi	r24, 0x3F	; 63
  66:	87 bb       	out	0x17, r24	; 23

sei(); 
  68:	78 94       	sei

}
  6a:	08 95       	ret

0000006c <__vector_6>:

ISR (TIMER1_COMPA_vect) //void timer1_compa_isr(void)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
PORTB=0X00;
  76:	18 ba       	out	0x18, r1	; 24
TCNT1H=0x00;
  78:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
  7a:	1c bc       	out	0x2c, r1	; 44
}
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <__vector_7>:

ISR (TIMER1_COMPB_vect) // void timer1_compb_isr(void)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
switch(i)
  94:	80 91 65 00 	lds	r24, 0x0065
  98:	90 91 66 00 	lds	r25, 0x0066
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	91 05       	cpc	r25, r1
  a0:	49 f1       	breq	.+82     	; 0xf4 <__vector_7+0x6e>
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	91 05       	cpc	r25, r1
  a6:	34 f4       	brge	.+12     	; 0xb4 <__vector_7+0x2e>
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	71 f0       	breq	.+28     	; 0xc8 <__vector_7+0x42>
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <__vector_7+0x2c>
  b0:	52 c0       	rjmp	.+164    	; 0x156 <__vector_7+0xd0>
  b2:	15 c0       	rjmp	.+42     	; 0xde <__vector_7+0x58>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	91 05       	cpc	r25, r1
  b8:	99 f1       	breq	.+102    	; 0x120 <__vector_7+0x9a>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	91 05       	cpc	r25, r1
  be:	2c f1       	brlt	.+74     	; 0x10a <__vector_7+0x84>
  c0:	05 97       	sbiw	r24, 0x05	; 5
  c2:	09 f0       	breq	.+2      	; 0xc6 <__vector_7+0x40>
  c4:	48 c0       	rjmp	.+144    	; 0x156 <__vector_7+0xd0>
  c6:	3b c0       	rjmp	.+118    	; 0x13e <__vector_7+0xb8>
{
case 0:
 OCR1BH=m0h;     
  c8:	80 91 61 00 	lds	r24, 0x0061
  cc:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m0l;     
  ce:	80 91 6a 00 	lds	r24, 0x006A
  d2:	88 bd       	out	0x28, r24	; 40
 PORTB=0X01;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	88 bb       	out	0x18, r24	; 24
 i=1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2b c0       	rjmp	.+86     	; 0x134 <__vector_7+0xae>
 break ;  
 
case 1:
 OCR1BH=m1h;       
  de:	80 91 64 00 	lds	r24, 0x0064
  e2:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m1l;      
  e4:	80 91 70 00 	lds	r24, 0x0070
  e8:	88 bd       	out	0x28, r24	; 40
 PORTB=0X02;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	88 bb       	out	0x18, r24	; 24
 i=2;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	20 c0       	rjmp	.+64     	; 0x134 <__vector_7+0xae>
 break ; 
 
case 2:
 OCR1BH=m2h;              
  f4:	80 91 6e 00 	lds	r24, 0x006E
  f8:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m2l;                
  fa:	80 91 6b 00 	lds	r24, 0x006B
  fe:	88 bd       	out	0x28, r24	; 40
 PORTB=0X04;
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	88 bb       	out	0x18, r24	; 24
 i=3;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	15 c0       	rjmp	.+42     	; 0x134 <__vector_7+0xae>
 break ;
 
case 3:
 OCR1BH=m3h;   
 10a:	80 91 67 00 	lds	r24, 0x0067
 10e:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m3l;      
 110:	80 91 69 00 	lds	r24, 0x0069
 114:	88 bd       	out	0x28, r24	; 40
 PORTB=0X08;
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	88 bb       	out	0x18, r24	; 24
 i=4;
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0a c0       	rjmp	.+20     	; 0x134 <__vector_7+0xae>
 break ;

case 4:
 OCR1BH=m4h;   
 120:	80 91 68 00 	lds	r24, 0x0068
 124:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m4l;      
 126:	80 91 6d 00 	lds	r24, 0x006D
 12a:	88 bd       	out	0x28, r24	; 40
 PORTB=0X10;
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	88 bb       	out	0x18, r24	; 24
 i=5;
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 66 00 	sts	0x0066, r25
 138:	80 93 65 00 	sts	0x0065, r24
 13c:	0c c0       	rjmp	.+24     	; 0x156 <__vector_7+0xd0>
 break ;
 
case 5:
 OCR1BH=m5h;   
 13e:	80 91 6f 00 	lds	r24, 0x006F
 142:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m5l;      
 144:	80 91 63 00 	lds	r24, 0x0063
 148:	88 bd       	out	0x28, r24	; 40
 PORTB=0X20;
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	88 bb       	out	0x18, r24	; 24
 i=0;
 14e:	10 92 66 00 	sts	0x0066, r1
 152:	10 92 65 00 	sts	0x0065, r1
 break ; 
 } 
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <mov>:

void mov(float value,int m)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ea 01       	movw	r28, r20
        unsigned int va;
        va=2600+(value+50)*11.843;  //for degree format
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	48 e4       	ldi	r20, 0x48	; 72
 170:	52 e4       	ldi	r21, 0x42	; 66
 172:	bc d1       	rcall	.+888    	; 0x4ec <__addsf3>
 174:	2e ee       	ldi	r18, 0xEE	; 238
 176:	3c e7       	ldi	r19, 0x7C	; 124
 178:	4d e3       	ldi	r20, 0x3D	; 61
 17a:	51 e4       	ldi	r21, 0x41	; 65
 17c:	d5 d2       	rcall	.+1450   	; 0x728 <__mulsf3>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e8       	ldi	r19, 0x80	; 128
 182:	42 e2       	ldi	r20, 0x22	; 34
 184:	55 e4       	ldi	r21, 0x45	; 69
 186:	b2 d1       	rcall	.+868    	; 0x4ec <__addsf3>
 188:	15 d2       	rcall	.+1066   	; 0x5b4 <__fixunssfsi>
 18a:	36 2f       	mov	r19, r22
 18c:	27 2f       	mov	r18, r23
		//va=795+value*15;      //for potentio meter format
        if(m==2)              
 18e:	c2 30       	cpi	r28, 0x02	; 2
 190:	d1 05       	cpc	r29, r1
 192:	39 f4       	brne	.+14     	; 0x1a2 <mov+0x3e>
        {
                m1l=va;
 194:	60 93 70 00 	sts	0x0070, r22
                temp=va>>8;
 198:	70 93 62 00 	sts	0x0062, r23
                m1h=temp;
 19c:	70 93 64 00 	sts	0x0064, r23
 1a0:	1d c0       	rjmp	.+58     	; 0x1dc <mov+0x78>
        }
        if(m==3)            
 1a2:	c3 30       	cpi	r28, 0x03	; 3
 1a4:	d1 05       	cpc	r29, r1
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <mov+0x52>
        {
                m2l=va;
 1a8:	60 93 6b 00 	sts	0x006B, r22
                temp=va>>8;
 1ac:	70 93 62 00 	sts	0x0062, r23
                m2h=temp;
 1b0:	70 93 6e 00 	sts	0x006E, r23
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <mov+0x8c>
        }
        if(m==0)       
 1b6:	20 97       	sbiw	r28, 0x00	; 0
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <mov+0x64>
        {
                m5l=va;
 1ba:	60 93 63 00 	sts	0x0063, r22
                temp=va>>8;
 1be:	70 93 62 00 	sts	0x0062, r23
                m5h=temp;
 1c2:	70 93 6f 00 	sts	0x006F, r23
 1c6:	1c c0       	rjmp	.+56     	; 0x200 <mov+0x9c>
        }
        if(m==1)     
 1c8:	c1 30       	cpi	r28, 0x01	; 1
 1ca:	d1 05       	cpc	r29, r1
 1cc:	39 f4       	brne	.+14     	; 0x1dc <mov+0x78>
        {
                m0l=va;
 1ce:	60 93 6a 00 	sts	0x006A, r22
                temp=va>>8;
 1d2:	70 93 62 00 	sts	0x0062, r23
                m0h=temp;
 1d6:	70 93 61 00 	sts	0x0061, r23
 1da:	12 c0       	rjmp	.+36     	; 0x200 <mov+0x9c>
        }
        if(m==4)     
 1dc:	c4 30       	cpi	r28, 0x04	; 4
 1de:	d1 05       	cpc	r29, r1
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <mov+0x8c>
        {
                m3l=va;
 1e2:	30 93 69 00 	sts	0x0069, r19
                temp=va>>8;
 1e6:	20 93 62 00 	sts	0x0062, r18
                m3h=temp;
 1ea:	20 93 67 00 	sts	0x0067, r18
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <mov+0x9c>
        }
        if(m==5)     
 1f0:	25 97       	sbiw	r28, 0x05	; 5
 1f2:	31 f4       	brne	.+12     	; 0x200 <mov+0x9c>
        {
                m4l=va;
 1f4:	30 93 6d 00 	sts	0x006D, r19
                temp=va>>8;
 1f8:	20 93 62 00 	sts	0x0062, r18
                m4h=temp;
 1fc:	20 93 68 00 	sts	0x0068, r18
        }		
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <stop>:
	#include<util/delay.h>
	#include "servo.h"
	#define DELAY 300
	stop()
	{
		mov(90,0);		//LR
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	84 eb       	ldi	r24, 0xB4	; 180
 20c:	92 e4       	ldi	r25, 0x42	; 66
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	a8 df       	rcall	.-176    	; 0x164 <mov>
		mov(80,1);		//LL
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	80 ea       	ldi	r24, 0xA0	; 160
 21a:	92 e4       	ldi	r25, 0x42	; 66
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	a1 df       	rcall	.-190    	; 0x164 <mov>
		mov(90,2);		//UR
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	84 eb       	ldi	r24, 0xB4	; 180
 228:	92 e4       	ldi	r25, 0x42	; 66
 22a:	42 e0       	ldi	r20, 0x02	; 2
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	9a df       	rcall	.-204    	; 0x164 <mov>
		mov(90,3);		//UL
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	84 eb       	ldi	r24, 0xB4	; 180
 236:	92 e4       	ldi	r25, 0x42	; 66
 238:	43 e0       	ldi	r20, 0x03	; 3
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	93 df       	rcall	.-218    	; 0x164 <mov>
	}
 23e:	08 95       	ret

00000240 <main>:

	int main()
	 {
 240:	8f 92       	push	r8
 242:	9f 92       	push	r9
 244:	af 92       	push	r10
 246:	bf 92       	push	r11
 248:	cf 92       	push	r12
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	 
	 DDRC=0x00;
 256:	14 ba       	out	0x14, r1	; 20
	 PORTC=0x0f;
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	85 bb       	out	0x15, r24	; 21
	 
	 servo_init();
 25c:	f5 de       	rcall	.-534    	; 0x48 <servo_init>
	 
		stop();
 25e:	d3 df       	rcall	.-90     	; 0x206 <stop>
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 264:	2c e2       	ldi	r18, 0x2C	; 44
 266:	31 e0       	ldi	r19, 0x01	; 1
 268:	f9 01       	movw	r30, r18
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 270:	d9 f7       	brne	.-10     	; 0x268 <main+0x28>
 272:	10 e0       	ldi	r17, 0x00	; 0
	 _delay_ms(2000);
	 while(1)
	   {
	   	for (char i=0;i<=35;i++)	// left leg forward 	
 274:	3a e5       	ldi	r19, 0x5A	; 90
 276:	83 2e       	mov	r8, r19
 278:	91 2c       	mov	r9, r1
 27a:	28 ec       	ldi	r18, 0xC8	; 200
 27c:	e2 2e       	mov	r14, r18
 27e:	2f ea       	ldi	r18, 0xAF	; 175
 280:	f2 2e       	mov	r15, r18
 282:	98 ec       	ldi	r25, 0xC8	; 200
 284:	a9 2e       	mov	r10, r25
 286:	9f ea       	ldi	r25, 0xAF	; 175
 288:	b9 2e       	mov	r11, r25
 28a:	8c e2       	ldi	r24, 0x2C	; 44
 28c:	c8 2e       	mov	r12, r24
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	d8 2e       	mov	r13, r24
 292:	12 c0       	rjmp	.+36     	; 0x2b8 <main+0x78>
			{						    // UR MOTOR TO RIGHT DRIRECTION
			mov(90-i,2);
 294:	b4 01       	movw	r22, r8
 296:	61 1b       	sub	r22, r17
 298:	71 09       	sbc	r23, r1
 29a:	88 27       	eor	r24, r24
 29c:	77 fd       	sbrc	r23, 7
 29e:	80 95       	com	r24
 2a0:	98 2f       	mov	r25, r24
 2a2:	b6 d1       	rcall	.+876    	; 0x610 <__floatsisf>
 2a4:	42 e0       	ldi	r20, 0x02	; 2
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	5d df       	rcall	.-326    	; 0x164 <mov>
 2aa:	c7 01       	movw	r24, r14
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x6c>
	 
		stop();
	 _delay_ms(2000);
	 while(1)
	   {
	   	for (char i=0;i<=35;i++)	// left leg forward 	
 2b0:	1f 5f       	subi	r17, 0xFF	; 255
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0x78>
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	ee cf       	rjmp	.-36     	; 0x294 <main+0x54>
 2b8:	14 32       	cpi	r17, 0x24	; 36
 2ba:	60 f3       	brcs	.-40     	; 0x294 <main+0x54>
 2bc:	ca e5       	ldi	r28, 0x5A	; 90
 2be:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=25;i++) // LR MOTOR TO RIGHT DRIRECTION
			{
			mov(90-i,0);
 2c0:	be 01       	movw	r22, r28
 2c2:	88 27       	eor	r24, r24
 2c4:	77 fd       	sbrc	r23, 7
 2c6:	80 95       	com	r24
 2c8:	98 2f       	mov	r25, r24
 2ca:	a2 d1       	rcall	.+836    	; 0x610 <__floatsisf>
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	49 df       	rcall	.-366    	; 0x164 <mov>
 2d2:	c7 01       	movw	r24, r14
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x94>
 2d8:	21 97       	sbiw	r28, 0x01	; 1
			{						    // UR MOTOR TO RIGHT DRIRECTION
			mov(90-i,2);
			_delay_ms(15);
			}
			
			for (char i=0;i<=25;i++) // LR MOTOR TO RIGHT DRIRECTION
 2da:	c0 34       	cpi	r28, 0x40	; 64
 2dc:	d1 05       	cpc	r29, r1
 2de:	81 f7       	brne	.-32     	; 0x2c0 <main+0x80>
 2e0:	ca e5       	ldi	r28, 0x5A	; 90
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=35;i++) // LL MOTOR TO LEFT DRIRECTION
			{
			mov(90-i,1);
 2e4:	be 01       	movw	r22, r28
 2e6:	88 27       	eor	r24, r24
 2e8:	77 fd       	sbrc	r23, 7
 2ea:	80 95       	com	r24
 2ec:	98 2f       	mov	r25, r24
 2ee:	90 d1       	rcall	.+800    	; 0x610 <__floatsisf>
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	37 df       	rcall	.-402    	; 0x164 <mov>
 2f6:	80 e9       	ldi	r24, 0x90	; 144
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	f6 01       	movw	r30, r12
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 300:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 302:	d9 f7       	brne	.-10     	; 0x2fa <main+0xba>
 304:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(90-i,0);
			_delay_ms(15);
			}
			
			for (char i=0;i<=35;i++) // LL MOTOR TO LEFT DRIRECTION
 306:	c6 33       	cpi	r28, 0x36	; 54
 308:	d1 05       	cpc	r29, r1
 30a:	61 f7       	brne	.-40     	; 0x2e4 <main+0xa4>
 30c:	c1 e4       	ldi	r28, 0x41	; 65
 30e:	d0 e0       	ldi	r29, 0x00	; 0
			mov(90-i,1);
			_delay_ms(40);
			}
			for (char i=0;i<=30;i++)		// UR MOTOR TO LEFT DRIRECTION
			{
			mov(65+i,2);
 310:	be 01       	movw	r22, r28
 312:	88 27       	eor	r24, r24
 314:	77 fd       	sbrc	r23, 7
 316:	80 95       	com	r24
 318:	98 2f       	mov	r25, r24
 31a:	7a d1       	rcall	.+756    	; 0x610 <__floatsisf>
 31c:	42 e0       	ldi	r20, 0x02	; 2
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	21 df       	rcall	.-446    	; 0x164 <mov>
 322:	c7 01       	movw	r24, r14
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <main+0xe4>
 328:	21 96       	adiw	r28, 0x01	; 1
			for (char i=0;i<=35;i++) // LL MOTOR TO LEFT DRIRECTION
			{
			mov(90-i,1);
			_delay_ms(40);
			}
			for (char i=0;i<=30;i++)		// UR MOTOR TO LEFT DRIRECTION
 32a:	c0 36       	cpi	r28, 0x60	; 96
 32c:	d1 05       	cpc	r29, r1
 32e:	81 f7       	brne	.-32     	; 0x310 <main+0xd0>
 330:	ca e5       	ldi	r28, 0x5A	; 90
 332:	d0 e0       	ldi	r29, 0x00	; 0
			mov(65+i,2);
			_delay_ms(15);
			}
			for (char i=0;i<=40;i++)		// Right leg forward 
			{          					 // UR MOTOR TO RIGHT DRIRECTION
			mov(90+i,3);
 334:	be 01       	movw	r22, r28
 336:	88 27       	eor	r24, r24
 338:	77 fd       	sbrc	r23, 7
 33a:	80 95       	com	r24
 33c:	98 2f       	mov	r25, r24
 33e:	68 d1       	rcall	.+720    	; 0x610 <__floatsisf>
 340:	43 e0       	ldi	r20, 0x03	; 3
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	0f df       	rcall	.-482    	; 0x164 <mov>
 346:	c7 01       	movw	r24, r14
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x108>
 34c:	21 96       	adiw	r28, 0x01	; 1
			for (char i=0;i<=30;i++)		// UR MOTOR TO LEFT DRIRECTION
			{
			mov(65+i,2);
			_delay_ms(15);
			}
			for (char i=0;i<=40;i++)		// Right leg forward 
 34e:	c3 38       	cpi	r28, 0x83	; 131
 350:	d1 05       	cpc	r29, r1
 352:	81 f7       	brne	.-32     	; 0x334 <main+0xf4>
			_delay_ms(15);
			}
			
			for (char i=0;i<=0;i++) // LL MOTOR TO LEFT DRIRECTION
			{
			mov(90+i,1);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	84 eb       	ldi	r24, 0xB4	; 180
 35a:	92 e4       	ldi	r25, 0x42	; 66
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	01 df       	rcall	.-510    	; 0x164 <mov>
 362:	c5 01       	movw	r24, r10
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x124>
 368:	ca e5       	ldi	r28, 0x5A	; 90
 36a:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=05;i++) // LR MOTOR TO LEFT DRIRECTION
			{
			mov(90+i,0);
 36c:	be 01       	movw	r22, r28
 36e:	88 27       	eor	r24, r24
 370:	77 fd       	sbrc	r23, 7
 372:	80 95       	com	r24
 374:	98 2f       	mov	r25, r24
 376:	4c d1       	rcall	.+664    	; 0x610 <__floatsisf>
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	f3 de       	rcall	.-538    	; 0x164 <mov>
 37e:	c7 01       	movw	r24, r14
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x140>
 384:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(90+i,1);
			_delay_ms(15);
			}
			
			for (char i=0;i<=05;i++) // LR MOTOR TO LEFT DRIRECTION
 386:	c0 36       	cpi	r28, 0x60	; 96
 388:	d1 05       	cpc	r29, r1
 38a:	81 f7       	brne	.-32     	; 0x36c <main+0x12c>
 38c:	c2 e8       	ldi	r28, 0x82	; 130
 38e:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++)// UR MOTOR TO LEFT DRIRECTION
			{
			mov(130-i,3);
 390:	be 01       	movw	r22, r28
 392:	88 27       	eor	r24, r24
 394:	77 fd       	sbrc	r23, 7
 396:	80 95       	com	r24
 398:	98 2f       	mov	r25, r24
 39a:	3a d1       	rcall	.+628    	; 0x610 <__floatsisf>
 39c:	43 e0       	ldi	r20, 0x03	; 3
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	e1 de       	rcall	.-574    	; 0x164 <mov>
 3a2:	c7 01       	movw	r24, r14
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <main+0x164>
 3a8:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(90+i,0);
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++)// UR MOTOR TO LEFT DRIRECTION
 3aa:	c9 35       	cpi	r28, 0x59	; 89
 3ac:	d1 05       	cpc	r29, r1
 3ae:	81 f7       	brne	.-32     	; 0x390 <main+0x150>
			{
			mov(130-i,3);
			_delay_ms(15);
			}
			
		if((PINC & 0x01) == 0x00)
 3b0:	98 99       	sbic	0x13, 0	; 19
 3b2:	80 cf       	rjmp	.-256    	; 0x2b4 <main+0x74>
 3b4:	11 e0       	ldi	r17, 0x01	; 1
 3b6:	96 c0       	rjmp	.+300    	; 0x4e4 <__stack+0x85>
		for(char x=1;x<=3;x++)
			{
		
			for (char i=0;i<=40;i++)		// Right leg forward
			{								// UL MOTOR TO RIGHT DRIRECTION
			mov(90+i,3);
 3b8:	be 01       	movw	r22, r28
 3ba:	88 27       	eor	r24, r24
 3bc:	77 fd       	sbrc	r23, 7
 3be:	80 95       	com	r24
 3c0:	98 2f       	mov	r25, r24
 3c2:	26 d1       	rcall	.+588    	; 0x610 <__floatsisf>
 3c4:	43 e0       	ldi	r20, 0x03	; 3
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	cd de       	rcall	.-614    	; 0x164 <mov>
 3ca:	c7 01       	movw	r24, r14
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x18c>
 3d0:	21 96       	adiw	r28, 0x01	; 1
		if((PINC & 0x01) == 0x00)
		{  
		for(char x=1;x<=3;x++)
			{
		
			for (char i=0;i<=40;i++)		// Right leg forward
 3d2:	c3 38       	cpi	r28, 0x83	; 131
 3d4:	d1 05       	cpc	r29, r1
 3d6:	81 f7       	brne	.-32     	; 0x3b8 <main+0x178>
 3d8:	ca e5       	ldi	r28, 0x5A	; 90
 3da:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++) //  LL MOTOR TO LEFT DRIRECTION
			{
			mov(90-i,1);
 3dc:	be 01       	movw	r22, r28
 3de:	88 27       	eor	r24, r24
 3e0:	77 fd       	sbrc	r23, 7
 3e2:	80 95       	com	r24
 3e4:	98 2f       	mov	r25, r24
 3e6:	14 d1       	rcall	.+552    	; 0x610 <__floatsisf>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	bb de       	rcall	.-650    	; 0x164 <mov>
 3ee:	c7 01       	movw	r24, r14
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <main+0x1b0>
 3f4:	21 97       	sbiw	r28, 0x01	; 1
			{								// UL MOTOR TO RIGHT DRIRECTION
			mov(90+i,3);
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++) //  LL MOTOR TO LEFT DRIRECTION
 3f6:	c1 33       	cpi	r28, 0x31	; 49
 3f8:	d1 05       	cpc	r29, r1
 3fa:	81 f7       	brne	.-32     	; 0x3dc <main+0x19c>
 3fc:	ca e5       	ldi	r28, 0x5A	; 90
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=27;i++)//  Lr MOTOR TO RIGHT DRIRECTION
			{
			mov(90-i,0);
 400:	be 01       	movw	r22, r28
 402:	88 27       	eor	r24, r24
 404:	77 fd       	sbrc	r23, 7
 406:	80 95       	com	r24
 408:	98 2f       	mov	r25, r24
 40a:	02 d1       	rcall	.+516    	; 0x610 <__floatsisf>
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	a9 de       	rcall	.-686    	; 0x164 <mov>
 412:	c7 01       	movw	r24, r14
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <main+0x1d4>
 418:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(90-i,1);
			_delay_ms(15);
			}
			
			for (char i=0;i<=27;i++)//  Lr MOTOR TO RIGHT DRIRECTION
 41a:	ce 33       	cpi	r28, 0x3E	; 62
 41c:	d1 05       	cpc	r29, r1
 41e:	81 f7       	brne	.-32     	; 0x400 <main+0x1c0>
 420:	c2 e8       	ldi	r28, 0x82	; 130
 422:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++)// UL MOTOR TO LEFT DRIRECTION
			{
			mov(130-i,3);
 424:	be 01       	movw	r22, r28
 426:	88 27       	eor	r24, r24
 428:	77 fd       	sbrc	r23, 7
 42a:	80 95       	com	r24
 42c:	98 2f       	mov	r25, r24
 42e:	f0 d0       	rcall	.+480    	; 0x610 <__floatsisf>
 430:	43 e0       	ldi	r20, 0x03	; 3
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	97 de       	rcall	.-722    	; 0x164 <mov>
 436:	c7 01       	movw	r24, r14
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <main+0x1f8>
 43c:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(90-i,0);
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++)// UL MOTOR TO LEFT DRIRECTION
 43e:	c9 35       	cpi	r28, 0x59	; 89
 440:	d1 05       	cpc	r29, r1
 442:	81 f7       	brne	.-32     	; 0x424 <main+0x1e4>
 444:	ca e5       	ldi	r28, 0x5A	; 90
 446:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			 
			for (char i=0;i<=35;i++)		// Left leg forward
			{								//UR TO RIGHT DIR
			mov(90-i,2);
 448:	be 01       	movw	r22, r28
 44a:	88 27       	eor	r24, r24
 44c:	77 fd       	sbrc	r23, 7
 44e:	80 95       	com	r24
 450:	98 2f       	mov	r25, r24
 452:	de d0       	rcall	.+444    	; 0x610 <__floatsisf>
 454:	42 e0       	ldi	r20, 0x02	; 2
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	85 de       	rcall	.-758    	; 0x164 <mov>
 45a:	c7 01       	movw	r24, r14
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <main+0x21c>
 460:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(130-i,3);
			_delay_ms(15);
			}
			 
			for (char i=0;i<=35;i++)		// Left leg forward
 462:	c6 33       	cpi	r28, 0x36	; 54
 464:	d1 05       	cpc	r29, r1
 466:	81 f7       	brne	.-32     	; 0x448 <main+0x208>
 468:	ca e5       	ldi	r28, 0x5A	; 90
 46a:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=33;i++)
			{
			mov(90+i,0);
 46c:	be 01       	movw	r22, r28
 46e:	88 27       	eor	r24, r24
 470:	77 fd       	sbrc	r23, 7
 472:	80 95       	com	r24
 474:	98 2f       	mov	r25, r24
 476:	cc d0       	rcall	.+408    	; 0x610 <__floatsisf>
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	73 de       	rcall	.-794    	; 0x164 <mov>
 47e:	c7 01       	movw	r24, r14
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <__stack+0x21>
 484:	21 96       	adiw	r28, 0x01	; 1
			{								//UR TO RIGHT DIR
			mov(90-i,2);
			_delay_ms(15);
			}
			
			for (char i=0;i<=33;i++)
 486:	cc 37       	cpi	r28, 0x7C	; 124
 488:	d1 05       	cpc	r29, r1
 48a:	81 f7       	brne	.-32     	; 0x46c <__stack+0xd>
 48c:	ca e5       	ldi	r28, 0x5A	; 90
 48e:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=17;i++)
			{
			mov(90+i,1);
 490:	be 01       	movw	r22, r28
 492:	88 27       	eor	r24, r24
 494:	77 fd       	sbrc	r23, 7
 496:	80 95       	com	r24
 498:	98 2f       	mov	r25, r24
 49a:	ba d0       	rcall	.+372    	; 0x610 <__floatsisf>
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	61 de       	rcall	.-830    	; 0x164 <mov>
 4a2:	80 e9       	ldi	r24, 0x90	; 144
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	f6 01       	movw	r30, r12
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__stack+0x49>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ae:	d9 f7       	brne	.-10     	; 0x4a6 <__stack+0x47>
 4b0:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(90+i,0);
			_delay_ms(15);
			}
			
			for (char i=0;i<=17;i++)
 4b2:	cc 36       	cpi	r28, 0x6C	; 108
 4b4:	d1 05       	cpc	r29, r1
 4b6:	61 f7       	brne	.-40     	; 0x490 <__stack+0x31>
 4b8:	c1 e4       	ldi	r28, 0x41	; 65
 4ba:	d0 e0       	ldi	r29, 0x00	; 0
			mov(90+i,1);
			_delay_ms(40);
			}
			for (char i=0;i<=30;i++)		
			{
			mov(65+i,2); // //UR TO LEFT DIR
 4bc:	be 01       	movw	r22, r28
 4be:	88 27       	eor	r24, r24
 4c0:	77 fd       	sbrc	r23, 7
 4c2:	80 95       	com	r24
 4c4:	98 2f       	mov	r25, r24
 4c6:	a4 d0       	rcall	.+328    	; 0x610 <__floatsisf>
 4c8:	42 e0       	ldi	r20, 0x02	; 2
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	4b de       	rcall	.-874    	; 0x164 <mov>
 4ce:	c7 01       	movw	r24, r14
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__stack+0x71>
 4d4:	21 96       	adiw	r28, 0x01	; 1
			for (char i=0;i<=17;i++)
			{
			mov(90+i,1);
			_delay_ms(40);
			}
			for (char i=0;i<=30;i++)		
 4d6:	c0 36       	cpi	r28, 0x60	; 96
 4d8:	d1 05       	cpc	r29, r1
 4da:	81 f7       	brne	.-32     	; 0x4bc <__stack+0x5d>
			_delay_ms(15);
			}
			
		if((PINC & 0x01) == 0x00)
		{  
		for(char x=1;x<=3;x++)
 4dc:	1f 5f       	subi	r17, 0xFF	; 255
 4de:	14 30       	cpi	r17, 0x04	; 4
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__stack+0x85>
 4e2:	e8 ce       	rjmp	.-560    	; 0x2b4 <main+0x74>
 4e4:	ca e5       	ldi	r28, 0x5A	; 90
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	67 cf       	rjmp	.-306    	; 0x3b8 <main+0x178>

000004ea <__subsf3>:
 4ea:	50 58       	subi	r21, 0x80	; 128

000004ec <__addsf3>:
 4ec:	bb 27       	eor	r27, r27
 4ee:	aa 27       	eor	r26, r26
 4f0:	0e d0       	rcall	.+28     	; 0x50e <__addsf3x>
 4f2:	e0 c0       	rjmp	.+448    	; 0x6b4 <__fp_round>
 4f4:	d1 d0       	rcall	.+418    	; 0x698 <__fp_pscA>
 4f6:	30 f0       	brcs	.+12     	; 0x504 <__addsf3+0x18>
 4f8:	d6 d0       	rcall	.+428    	; 0x6a6 <__fp_pscB>
 4fa:	20 f0       	brcs	.+8      	; 0x504 <__addsf3+0x18>
 4fc:	31 f4       	brne	.+12     	; 0x50a <__addsf3+0x1e>
 4fe:	9f 3f       	cpi	r25, 0xFF	; 255
 500:	11 f4       	brne	.+4      	; 0x506 <__addsf3+0x1a>
 502:	1e f4       	brtc	.+6      	; 0x50a <__addsf3+0x1e>
 504:	c6 c0       	rjmp	.+396    	; 0x692 <__fp_nan>
 506:	0e f4       	brtc	.+2      	; 0x50a <__addsf3+0x1e>
 508:	e0 95       	com	r30
 50a:	e7 fb       	bst	r30, 7
 50c:	bc c0       	rjmp	.+376    	; 0x686 <__fp_inf>

0000050e <__addsf3x>:
 50e:	e9 2f       	mov	r30, r25
 510:	e2 d0       	rcall	.+452    	; 0x6d6 <__fp_split3>
 512:	80 f3       	brcs	.-32     	; 0x4f4 <__addsf3+0x8>
 514:	ba 17       	cp	r27, r26
 516:	62 07       	cpc	r22, r18
 518:	73 07       	cpc	r23, r19
 51a:	84 07       	cpc	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	18 f0       	brcs	.+6      	; 0x526 <__addsf3x+0x18>
 520:	71 f4       	brne	.+28     	; 0x53e <__addsf3x+0x30>
 522:	9e f5       	brtc	.+102    	; 0x58a <__addsf3x+0x7c>
 524:	fa c0       	rjmp	.+500    	; 0x71a <__fp_zero>
 526:	0e f4       	brtc	.+2      	; 0x52a <__addsf3x+0x1c>
 528:	e0 95       	com	r30
 52a:	0b 2e       	mov	r0, r27
 52c:	ba 2f       	mov	r27, r26
 52e:	a0 2d       	mov	r26, r0
 530:	0b 01       	movw	r0, r22
 532:	b9 01       	movw	r22, r18
 534:	90 01       	movw	r18, r0
 536:	0c 01       	movw	r0, r24
 538:	ca 01       	movw	r24, r20
 53a:	a0 01       	movw	r20, r0
 53c:	11 24       	eor	r1, r1
 53e:	ff 27       	eor	r31, r31
 540:	59 1b       	sub	r21, r25
 542:	99 f0       	breq	.+38     	; 0x56a <__addsf3x+0x5c>
 544:	59 3f       	cpi	r21, 0xF9	; 249
 546:	50 f4       	brcc	.+20     	; 0x55c <__addsf3x+0x4e>
 548:	50 3e       	cpi	r21, 0xE0	; 224
 54a:	68 f1       	brcs	.+90     	; 0x5a6 <__addsf3x+0x98>
 54c:	1a 16       	cp	r1, r26
 54e:	f0 40       	sbci	r31, 0x00	; 0
 550:	a2 2f       	mov	r26, r18
 552:	23 2f       	mov	r18, r19
 554:	34 2f       	mov	r19, r20
 556:	44 27       	eor	r20, r20
 558:	58 5f       	subi	r21, 0xF8	; 248
 55a:	f3 cf       	rjmp	.-26     	; 0x542 <__addsf3x+0x34>
 55c:	46 95       	lsr	r20
 55e:	37 95       	ror	r19
 560:	27 95       	ror	r18
 562:	a7 95       	ror	r26
 564:	f0 40       	sbci	r31, 0x00	; 0
 566:	53 95       	inc	r21
 568:	c9 f7       	brne	.-14     	; 0x55c <__addsf3x+0x4e>
 56a:	7e f4       	brtc	.+30     	; 0x58a <__addsf3x+0x7c>
 56c:	1f 16       	cp	r1, r31
 56e:	ba 0b       	sbc	r27, r26
 570:	62 0b       	sbc	r22, r18
 572:	73 0b       	sbc	r23, r19
 574:	84 0b       	sbc	r24, r20
 576:	ba f0       	brmi	.+46     	; 0x5a6 <__addsf3x+0x98>
 578:	91 50       	subi	r25, 0x01	; 1
 57a:	a1 f0       	breq	.+40     	; 0x5a4 <__addsf3x+0x96>
 57c:	ff 0f       	add	r31, r31
 57e:	bb 1f       	adc	r27, r27
 580:	66 1f       	adc	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	c2 f7       	brpl	.-16     	; 0x578 <__addsf3x+0x6a>
 588:	0e c0       	rjmp	.+28     	; 0x5a6 <__addsf3x+0x98>
 58a:	ba 0f       	add	r27, r26
 58c:	62 1f       	adc	r22, r18
 58e:	73 1f       	adc	r23, r19
 590:	84 1f       	adc	r24, r20
 592:	48 f4       	brcc	.+18     	; 0x5a6 <__addsf3x+0x98>
 594:	87 95       	ror	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b7 95       	ror	r27
 59c:	f7 95       	ror	r31
 59e:	9e 3f       	cpi	r25, 0xFE	; 254
 5a0:	08 f0       	brcs	.+2      	; 0x5a4 <__addsf3x+0x96>
 5a2:	b3 cf       	rjmp	.-154    	; 0x50a <__addsf3+0x1e>
 5a4:	93 95       	inc	r25
 5a6:	88 0f       	add	r24, r24
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <__addsf3x+0x9e>
 5aa:	99 27       	eor	r25, r25
 5ac:	ee 0f       	add	r30, r30
 5ae:	97 95       	ror	r25
 5b0:	87 95       	ror	r24
 5b2:	08 95       	ret

000005b4 <__fixunssfsi>:
 5b4:	98 d0       	rcall	.+304    	; 0x6e6 <__fp_splitA>
 5b6:	88 f0       	brcs	.+34     	; 0x5da <__fixunssfsi+0x26>
 5b8:	9f 57       	subi	r25, 0x7F	; 127
 5ba:	90 f0       	brcs	.+36     	; 0x5e0 <__fixunssfsi+0x2c>
 5bc:	b9 2f       	mov	r27, r25
 5be:	99 27       	eor	r25, r25
 5c0:	b7 51       	subi	r27, 0x17	; 23
 5c2:	a0 f0       	brcs	.+40     	; 0x5ec <__fixunssfsi+0x38>
 5c4:	d1 f0       	breq	.+52     	; 0x5fa <__fixunssfsi+0x46>
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	1a f0       	brmi	.+6      	; 0x5d6 <__fixunssfsi+0x22>
 5d0:	ba 95       	dec	r27
 5d2:	c9 f7       	brne	.-14     	; 0x5c6 <__fixunssfsi+0x12>
 5d4:	12 c0       	rjmp	.+36     	; 0x5fa <__fixunssfsi+0x46>
 5d6:	b1 30       	cpi	r27, 0x01	; 1
 5d8:	81 f0       	breq	.+32     	; 0x5fa <__fixunssfsi+0x46>
 5da:	9f d0       	rcall	.+318    	; 0x71a <__fp_zero>
 5dc:	b1 e0       	ldi	r27, 0x01	; 1
 5de:	08 95       	ret
 5e0:	9c c0       	rjmp	.+312    	; 0x71a <__fp_zero>
 5e2:	67 2f       	mov	r22, r23
 5e4:	78 2f       	mov	r23, r24
 5e6:	88 27       	eor	r24, r24
 5e8:	b8 5f       	subi	r27, 0xF8	; 248
 5ea:	39 f0       	breq	.+14     	; 0x5fa <__fixunssfsi+0x46>
 5ec:	b9 3f       	cpi	r27, 0xF9	; 249
 5ee:	cc f3       	brlt	.-14     	; 0x5e2 <__fixunssfsi+0x2e>
 5f0:	86 95       	lsr	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b3 95       	inc	r27
 5f8:	d9 f7       	brne	.-10     	; 0x5f0 <__fixunssfsi+0x3c>
 5fa:	3e f4       	brtc	.+14     	; 0x60a <__fixunssfsi+0x56>
 5fc:	90 95       	com	r25
 5fe:	80 95       	com	r24
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	08 95       	ret

0000060c <__floatunsisf>:
 60c:	e8 94       	clt
 60e:	09 c0       	rjmp	.+18     	; 0x622 <__floatsisf+0x12>

00000610 <__floatsisf>:
 610:	97 fb       	bst	r25, 7
 612:	3e f4       	brtc	.+14     	; 0x622 <__floatsisf+0x12>
 614:	90 95       	com	r25
 616:	80 95       	com	r24
 618:	70 95       	com	r23
 61a:	61 95       	neg	r22
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	99 23       	and	r25, r25
 624:	a9 f0       	breq	.+42     	; 0x650 <__floatsisf+0x40>
 626:	f9 2f       	mov	r31, r25
 628:	96 e9       	ldi	r25, 0x96	; 150
 62a:	bb 27       	eor	r27, r27
 62c:	93 95       	inc	r25
 62e:	f6 95       	lsr	r31
 630:	87 95       	ror	r24
 632:	77 95       	ror	r23
 634:	67 95       	ror	r22
 636:	b7 95       	ror	r27
 638:	f1 11       	cpse	r31, r1
 63a:	f8 cf       	rjmp	.-16     	; 0x62c <__floatsisf+0x1c>
 63c:	fa f4       	brpl	.+62     	; 0x67c <__floatsisf+0x6c>
 63e:	bb 0f       	add	r27, r27
 640:	11 f4       	brne	.+4      	; 0x646 <__floatsisf+0x36>
 642:	60 ff       	sbrs	r22, 0
 644:	1b c0       	rjmp	.+54     	; 0x67c <__floatsisf+0x6c>
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	16 c0       	rjmp	.+44     	; 0x67c <__floatsisf+0x6c>
 650:	88 23       	and	r24, r24
 652:	11 f0       	breq	.+4      	; 0x658 <__floatsisf+0x48>
 654:	96 e9       	ldi	r25, 0x96	; 150
 656:	11 c0       	rjmp	.+34     	; 0x67a <__floatsisf+0x6a>
 658:	77 23       	and	r23, r23
 65a:	21 f0       	breq	.+8      	; 0x664 <__floatsisf+0x54>
 65c:	9e e8       	ldi	r25, 0x8E	; 142
 65e:	87 2f       	mov	r24, r23
 660:	76 2f       	mov	r23, r22
 662:	05 c0       	rjmp	.+10     	; 0x66e <__floatsisf+0x5e>
 664:	66 23       	and	r22, r22
 666:	71 f0       	breq	.+28     	; 0x684 <__floatsisf+0x74>
 668:	96 e8       	ldi	r25, 0x86	; 134
 66a:	86 2f       	mov	r24, r22
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	2a f0       	brmi	.+10     	; 0x67c <__floatsisf+0x6c>
 672:	9a 95       	dec	r25
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	da f7       	brpl	.-10     	; 0x672 <__floatsisf+0x62>
 67c:	88 0f       	add	r24, r24
 67e:	96 95       	lsr	r25
 680:	87 95       	ror	r24
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret

00000686 <__fp_inf>:
 686:	97 f9       	bld	r25, 7
 688:	9f 67       	ori	r25, 0x7F	; 127
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	08 95       	ret

00000692 <__fp_nan>:
 692:	9f ef       	ldi	r25, 0xFF	; 255
 694:	80 ec       	ldi	r24, 0xC0	; 192
 696:	08 95       	ret

00000698 <__fp_pscA>:
 698:	00 24       	eor	r0, r0
 69a:	0a 94       	dec	r0
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	18 06       	cpc	r1, r24
 6a2:	09 06       	cpc	r0, r25
 6a4:	08 95       	ret

000006a6 <__fp_pscB>:
 6a6:	00 24       	eor	r0, r0
 6a8:	0a 94       	dec	r0
 6aa:	12 16       	cp	r1, r18
 6ac:	13 06       	cpc	r1, r19
 6ae:	14 06       	cpc	r1, r20
 6b0:	05 06       	cpc	r0, r21
 6b2:	08 95       	ret

000006b4 <__fp_round>:
 6b4:	09 2e       	mov	r0, r25
 6b6:	03 94       	inc	r0
 6b8:	00 0c       	add	r0, r0
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__fp_round+0xc>
 6bc:	88 23       	and	r24, r24
 6be:	52 f0       	brmi	.+20     	; 0x6d4 <__fp_round+0x20>
 6c0:	bb 0f       	add	r27, r27
 6c2:	40 f4       	brcc	.+16     	; 0x6d4 <__fp_round+0x20>
 6c4:	bf 2b       	or	r27, r31
 6c6:	11 f4       	brne	.+4      	; 0x6cc <__fp_round+0x18>
 6c8:	60 ff       	sbrs	r22, 0
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <__fp_round+0x20>
 6cc:	6f 5f       	subi	r22, 0xFF	; 255
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__fp_split3>:
 6d6:	57 fd       	sbrc	r21, 7
 6d8:	90 58       	subi	r25, 0x80	; 128
 6da:	44 0f       	add	r20, r20
 6dc:	55 1f       	adc	r21, r21
 6de:	59 f0       	breq	.+22     	; 0x6f6 <__fp_splitA+0x10>
 6e0:	5f 3f       	cpi	r21, 0xFF	; 255
 6e2:	71 f0       	breq	.+28     	; 0x700 <__fp_splitA+0x1a>
 6e4:	47 95       	ror	r20

000006e6 <__fp_splitA>:
 6e6:	88 0f       	add	r24, r24
 6e8:	97 fb       	bst	r25, 7
 6ea:	99 1f       	adc	r25, r25
 6ec:	61 f0       	breq	.+24     	; 0x706 <__fp_splitA+0x20>
 6ee:	9f 3f       	cpi	r25, 0xFF	; 255
 6f0:	79 f0       	breq	.+30     	; 0x710 <__fp_splitA+0x2a>
 6f2:	87 95       	ror	r24
 6f4:	08 95       	ret
 6f6:	12 16       	cp	r1, r18
 6f8:	13 06       	cpc	r1, r19
 6fa:	14 06       	cpc	r1, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	f2 cf       	rjmp	.-28     	; 0x6e4 <__fp_split3+0xe>
 700:	46 95       	lsr	r20
 702:	f1 df       	rcall	.-30     	; 0x6e6 <__fp_splitA>
 704:	08 c0       	rjmp	.+16     	; 0x716 <__fp_splitA+0x30>
 706:	16 16       	cp	r1, r22
 708:	17 06       	cpc	r1, r23
 70a:	18 06       	cpc	r1, r24
 70c:	99 1f       	adc	r25, r25
 70e:	f1 cf       	rjmp	.-30     	; 0x6f2 <__fp_splitA+0xc>
 710:	86 95       	lsr	r24
 712:	71 05       	cpc	r23, r1
 714:	61 05       	cpc	r22, r1
 716:	08 94       	sec
 718:	08 95       	ret

0000071a <__fp_zero>:
 71a:	e8 94       	clt

0000071c <__fp_szero>:
 71c:	bb 27       	eor	r27, r27
 71e:	66 27       	eor	r22, r22
 720:	77 27       	eor	r23, r23
 722:	cb 01       	movw	r24, r22
 724:	97 f9       	bld	r25, 7
 726:	08 95       	ret

00000728 <__mulsf3>:
 728:	0b d0       	rcall	.+22     	; 0x740 <__mulsf3x>
 72a:	c4 cf       	rjmp	.-120    	; 0x6b4 <__fp_round>
 72c:	b5 df       	rcall	.-150    	; 0x698 <__fp_pscA>
 72e:	28 f0       	brcs	.+10     	; 0x73a <__mulsf3+0x12>
 730:	ba df       	rcall	.-140    	; 0x6a6 <__fp_pscB>
 732:	18 f0       	brcs	.+6      	; 0x73a <__mulsf3+0x12>
 734:	95 23       	and	r25, r21
 736:	09 f0       	breq	.+2      	; 0x73a <__mulsf3+0x12>
 738:	a6 cf       	rjmp	.-180    	; 0x686 <__fp_inf>
 73a:	ab cf       	rjmp	.-170    	; 0x692 <__fp_nan>
 73c:	11 24       	eor	r1, r1
 73e:	ee cf       	rjmp	.-36     	; 0x71c <__fp_szero>

00000740 <__mulsf3x>:
 740:	ca df       	rcall	.-108    	; 0x6d6 <__fp_split3>
 742:	a0 f3       	brcs	.-24     	; 0x72c <__mulsf3+0x4>

00000744 <__mulsf3_pse>:
 744:	95 9f       	mul	r25, r21
 746:	d1 f3       	breq	.-12     	; 0x73c <__mulsf3+0x14>
 748:	95 0f       	add	r25, r21
 74a:	50 e0       	ldi	r21, 0x00	; 0
 74c:	55 1f       	adc	r21, r21
 74e:	62 9f       	mul	r22, r18
 750:	f0 01       	movw	r30, r0
 752:	72 9f       	mul	r23, r18
 754:	bb 27       	eor	r27, r27
 756:	f0 0d       	add	r31, r0
 758:	b1 1d       	adc	r27, r1
 75a:	63 9f       	mul	r22, r19
 75c:	aa 27       	eor	r26, r26
 75e:	f0 0d       	add	r31, r0
 760:	b1 1d       	adc	r27, r1
 762:	aa 1f       	adc	r26, r26
 764:	64 9f       	mul	r22, r20
 766:	66 27       	eor	r22, r22
 768:	b0 0d       	add	r27, r0
 76a:	a1 1d       	adc	r26, r1
 76c:	66 1f       	adc	r22, r22
 76e:	82 9f       	mul	r24, r18
 770:	22 27       	eor	r18, r18
 772:	b0 0d       	add	r27, r0
 774:	a1 1d       	adc	r26, r1
 776:	62 1f       	adc	r22, r18
 778:	73 9f       	mul	r23, r19
 77a:	b0 0d       	add	r27, r0
 77c:	a1 1d       	adc	r26, r1
 77e:	62 1f       	adc	r22, r18
 780:	83 9f       	mul	r24, r19
 782:	a0 0d       	add	r26, r0
 784:	61 1d       	adc	r22, r1
 786:	22 1f       	adc	r18, r18
 788:	74 9f       	mul	r23, r20
 78a:	33 27       	eor	r19, r19
 78c:	a0 0d       	add	r26, r0
 78e:	61 1d       	adc	r22, r1
 790:	23 1f       	adc	r18, r19
 792:	84 9f       	mul	r24, r20
 794:	60 0d       	add	r22, r0
 796:	21 1d       	adc	r18, r1
 798:	82 2f       	mov	r24, r18
 79a:	76 2f       	mov	r23, r22
 79c:	6a 2f       	mov	r22, r26
 79e:	11 24       	eor	r1, r1
 7a0:	9f 57       	subi	r25, 0x7F	; 127
 7a2:	50 40       	sbci	r21, 0x00	; 0
 7a4:	8a f0       	brmi	.+34     	; 0x7c8 <__mulsf3_pse+0x84>
 7a6:	e1 f0       	breq	.+56     	; 0x7e0 <__mulsf3_pse+0x9c>
 7a8:	88 23       	and	r24, r24
 7aa:	4a f0       	brmi	.+18     	; 0x7be <__mulsf3_pse+0x7a>
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	bb 1f       	adc	r27, r27
 7b2:	66 1f       	adc	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	91 50       	subi	r25, 0x01	; 1
 7ba:	50 40       	sbci	r21, 0x00	; 0
 7bc:	a9 f7       	brne	.-22     	; 0x7a8 <__mulsf3_pse+0x64>
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	51 05       	cpc	r21, r1
 7c2:	70 f0       	brcs	.+28     	; 0x7e0 <__mulsf3_pse+0x9c>
 7c4:	60 cf       	rjmp	.-320    	; 0x686 <__fp_inf>
 7c6:	aa cf       	rjmp	.-172    	; 0x71c <__fp_szero>
 7c8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ca:	ec f3       	brlt	.-6      	; 0x7c6 <__mulsf3_pse+0x82>
 7cc:	98 3e       	cpi	r25, 0xE8	; 232
 7ce:	dc f3       	brlt	.-10     	; 0x7c6 <__mulsf3_pse+0x82>
 7d0:	86 95       	lsr	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f7 95       	ror	r31
 7da:	e7 95       	ror	r30
 7dc:	9f 5f       	subi	r25, 0xFF	; 255
 7de:	c1 f7       	brne	.-16     	; 0x7d0 <__mulsf3_pse+0x8c>
 7e0:	fe 2b       	or	r31, r30
 7e2:	88 0f       	add	r24, r24
 7e4:	91 1d       	adc	r25, r1
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <_exit>:
 7ee:	f8 94       	cli

000007f0 <__stop_program>:
 7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <__stop_program>
