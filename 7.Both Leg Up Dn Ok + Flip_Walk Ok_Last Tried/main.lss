
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000011  00800060  00800060  00000992  2**0
                  ALLOC
  2 .stab         000013bc  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000083d  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__vector_6>
   e:	3b c0       	rjmp	.+118    	; 0x86 <__vector_7>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 37       	cpi	r26, 0x71	; 113
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	fe d0       	rcall	.+508    	; 0x240 <main>
  44:	6a c4       	rjmp	.+2260   	; 0x91a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <servo_init>:
int i;   
unsigned char m0h,m0l,m1h,m1l,m2h,m2l,m3h,m3l,x,y,m4h,m4l,m5h,m5l;
unsigned char temp;
void servo_init()
{
TCCR1A=0x03;
  48:	83 e0       	ldi	r24, 0x03	; 3
  4a:	8f bd       	out	0x2f, r24	; 47
TCCR1B=0x1A;
  4c:	8a e1       	ldi	r24, 0x1A	; 26
  4e:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x00;
  50:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
  52:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
  54:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
  56:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x19;
  58:	89 e1       	ldi	r24, 0x19	; 25
  5a:	8b bd       	out	0x2b, r24	; 43
OCR1AL=0xC8;
  5c:	88 ec       	ldi	r24, 0xC8	; 200
  5e:	8a bd       	out	0x2a, r24	; 42
//OCR1BH=0x0f;
//OCR1BL=0xA0;
TIMSK=0x18;  
  60:	88 e1       	ldi	r24, 0x18	; 24
  62:	89 bf       	out	0x39, r24	; 57
DDRB=0x3f;
  64:	8f e3       	ldi	r24, 0x3F	; 63
  66:	87 bb       	out	0x17, r24	; 23

sei(); 
  68:	78 94       	sei

}
  6a:	08 95       	ret

0000006c <__vector_6>:

ISR (TIMER1_COMPA_vect) //void timer1_compa_isr(void)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
PORTB=0X00;
  76:	18 ba       	out	0x18, r1	; 24
TCNT1H=0x00;
  78:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
  7a:	1c bc       	out	0x2c, r1	; 44
}
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <__vector_7>:

ISR (TIMER1_COMPB_vect) // void timer1_compb_isr(void)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
switch(i)
  94:	80 91 65 00 	lds	r24, 0x0065
  98:	90 91 66 00 	lds	r25, 0x0066
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	91 05       	cpc	r25, r1
  a0:	49 f1       	breq	.+82     	; 0xf4 <__vector_7+0x6e>
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	91 05       	cpc	r25, r1
  a6:	34 f4       	brge	.+12     	; 0xb4 <__vector_7+0x2e>
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	71 f0       	breq	.+28     	; 0xc8 <__vector_7+0x42>
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <__vector_7+0x2c>
  b0:	52 c0       	rjmp	.+164    	; 0x156 <__vector_7+0xd0>
  b2:	15 c0       	rjmp	.+42     	; 0xde <__vector_7+0x58>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	91 05       	cpc	r25, r1
  b8:	99 f1       	breq	.+102    	; 0x120 <__vector_7+0x9a>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	91 05       	cpc	r25, r1
  be:	2c f1       	brlt	.+74     	; 0x10a <__vector_7+0x84>
  c0:	05 97       	sbiw	r24, 0x05	; 5
  c2:	09 f0       	breq	.+2      	; 0xc6 <__vector_7+0x40>
  c4:	48 c0       	rjmp	.+144    	; 0x156 <__vector_7+0xd0>
  c6:	3b c0       	rjmp	.+118    	; 0x13e <__vector_7+0xb8>
{
case 0:
 OCR1BH=m0h;     
  c8:	80 91 61 00 	lds	r24, 0x0061
  cc:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m0l;     
  ce:	80 91 6a 00 	lds	r24, 0x006A
  d2:	88 bd       	out	0x28, r24	; 40
 PORTB=0X01;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	88 bb       	out	0x18, r24	; 24
 i=1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2b c0       	rjmp	.+86     	; 0x134 <__vector_7+0xae>
 break ;  
 
case 1:
 OCR1BH=m1h;       
  de:	80 91 64 00 	lds	r24, 0x0064
  e2:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m1l;      
  e4:	80 91 70 00 	lds	r24, 0x0070
  e8:	88 bd       	out	0x28, r24	; 40
 PORTB=0X02;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	88 bb       	out	0x18, r24	; 24
 i=2;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	20 c0       	rjmp	.+64     	; 0x134 <__vector_7+0xae>
 break ; 
 
case 2:
 OCR1BH=m2h;              
  f4:	80 91 6e 00 	lds	r24, 0x006E
  f8:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m2l;                
  fa:	80 91 6b 00 	lds	r24, 0x006B
  fe:	88 bd       	out	0x28, r24	; 40
 PORTB=0X04;
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	88 bb       	out	0x18, r24	; 24
 i=3;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	15 c0       	rjmp	.+42     	; 0x134 <__vector_7+0xae>
 break ;
 
case 3:
 OCR1BH=m3h;   
 10a:	80 91 67 00 	lds	r24, 0x0067
 10e:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m3l;      
 110:	80 91 69 00 	lds	r24, 0x0069
 114:	88 bd       	out	0x28, r24	; 40
 PORTB=0X08;
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	88 bb       	out	0x18, r24	; 24
 i=4;
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0a c0       	rjmp	.+20     	; 0x134 <__vector_7+0xae>
 break ;

case 4:
 OCR1BH=m4h;   
 120:	80 91 68 00 	lds	r24, 0x0068
 124:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m4l;      
 126:	80 91 6d 00 	lds	r24, 0x006D
 12a:	88 bd       	out	0x28, r24	; 40
 PORTB=0X10;
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	88 bb       	out	0x18, r24	; 24
 i=5;
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 66 00 	sts	0x0066, r25
 138:	80 93 65 00 	sts	0x0065, r24
 13c:	0c c0       	rjmp	.+24     	; 0x156 <__vector_7+0xd0>
 break ;
 
case 5:
 OCR1BH=m5h;   
 13e:	80 91 6f 00 	lds	r24, 0x006F
 142:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m5l;      
 144:	80 91 63 00 	lds	r24, 0x0063
 148:	88 bd       	out	0x28, r24	; 40
 PORTB=0X20;
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	88 bb       	out	0x18, r24	; 24
 i=0;
 14e:	10 92 66 00 	sts	0x0066, r1
 152:	10 92 65 00 	sts	0x0065, r1
 break ; 
 } 
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <mov>:

void mov(float value,int m)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ea 01       	movw	r28, r20
        unsigned int va;
        va=2600+(value+50)*11.843;  //for degree format
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	48 e4       	ldi	r20, 0x48	; 72
 170:	52 e4       	ldi	r21, 0x42	; 66
 172:	52 d2       	rcall	.+1188   	; 0x618 <__addsf3>
 174:	2e ee       	ldi	r18, 0xEE	; 238
 176:	3c e7       	ldi	r19, 0x7C	; 124
 178:	4d e3       	ldi	r20, 0x3D	; 61
 17a:	51 e4       	ldi	r21, 0x41	; 65
 17c:	6b d3       	rcall	.+1750   	; 0x854 <__mulsf3>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e8       	ldi	r19, 0x80	; 128
 182:	42 e2       	ldi	r20, 0x22	; 34
 184:	55 e4       	ldi	r21, 0x45	; 69
 186:	48 d2       	rcall	.+1168   	; 0x618 <__addsf3>
 188:	ab d2       	rcall	.+1366   	; 0x6e0 <__fixunssfsi>
 18a:	36 2f       	mov	r19, r22
 18c:	27 2f       	mov	r18, r23
		//va=795+value*15;      //for potentio meter format
        if(m==2)              
 18e:	c2 30       	cpi	r28, 0x02	; 2
 190:	d1 05       	cpc	r29, r1
 192:	39 f4       	brne	.+14     	; 0x1a2 <mov+0x3e>
        {
                m1l=va;
 194:	60 93 70 00 	sts	0x0070, r22
                temp=va>>8;
 198:	70 93 62 00 	sts	0x0062, r23
                m1h=temp;
 19c:	70 93 64 00 	sts	0x0064, r23
 1a0:	1d c0       	rjmp	.+58     	; 0x1dc <mov+0x78>
        }
        if(m==3)            
 1a2:	c3 30       	cpi	r28, 0x03	; 3
 1a4:	d1 05       	cpc	r29, r1
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <mov+0x52>
        {
                m2l=va;
 1a8:	60 93 6b 00 	sts	0x006B, r22
                temp=va>>8;
 1ac:	70 93 62 00 	sts	0x0062, r23
                m2h=temp;
 1b0:	70 93 6e 00 	sts	0x006E, r23
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <mov+0x8c>
        }
        if(m==0)       
 1b6:	20 97       	sbiw	r28, 0x00	; 0
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <mov+0x64>
        {
                m5l=va;
 1ba:	60 93 63 00 	sts	0x0063, r22
                temp=va>>8;
 1be:	70 93 62 00 	sts	0x0062, r23
                m5h=temp;
 1c2:	70 93 6f 00 	sts	0x006F, r23
 1c6:	1c c0       	rjmp	.+56     	; 0x200 <mov+0x9c>
        }
        if(m==1)     
 1c8:	c1 30       	cpi	r28, 0x01	; 1
 1ca:	d1 05       	cpc	r29, r1
 1cc:	39 f4       	brne	.+14     	; 0x1dc <mov+0x78>
        {
                m0l=va;
 1ce:	60 93 6a 00 	sts	0x006A, r22
                temp=va>>8;
 1d2:	70 93 62 00 	sts	0x0062, r23
                m0h=temp;
 1d6:	70 93 61 00 	sts	0x0061, r23
 1da:	12 c0       	rjmp	.+36     	; 0x200 <mov+0x9c>
        }
        if(m==4)     
 1dc:	c4 30       	cpi	r28, 0x04	; 4
 1de:	d1 05       	cpc	r29, r1
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <mov+0x8c>
        {
                m3l=va;
 1e2:	30 93 69 00 	sts	0x0069, r19
                temp=va>>8;
 1e6:	20 93 62 00 	sts	0x0062, r18
                m3h=temp;
 1ea:	20 93 67 00 	sts	0x0067, r18
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <mov+0x9c>
        }
        if(m==5)     
 1f0:	25 97       	sbiw	r28, 0x05	; 5
 1f2:	31 f4       	brne	.+12     	; 0x200 <mov+0x9c>
        {
                m4l=va;
 1f4:	30 93 6d 00 	sts	0x006D, r19
                temp=va>>8;
 1f8:	20 93 62 00 	sts	0x0062, r18
                m4h=temp;
 1fc:	20 93 68 00 	sts	0x0068, r18
        }		
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <stop>:
	#define DELAY 300

	
	stop()
	{
		mov(90,0);		//LR
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	84 eb       	ldi	r24, 0xB4	; 180
 20c:	92 e4       	ldi	r25, 0x42	; 66
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	a8 df       	rcall	.-176    	; 0x164 <mov>
		mov(80,1);		//LL
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	80 ea       	ldi	r24, 0xA0	; 160
 21a:	92 e4       	ldi	r25, 0x42	; 66
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	a1 df       	rcall	.-190    	; 0x164 <mov>
		mov(90,2);		//UR
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	84 eb       	ldi	r24, 0xB4	; 180
 228:	92 e4       	ldi	r25, 0x42	; 66
 22a:	42 e0       	ldi	r20, 0x02	; 2
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	9a df       	rcall	.-204    	; 0x164 <mov>
		mov(90,3);		//UL
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	84 eb       	ldi	r24, 0xB4	; 180
 236:	92 e4       	ldi	r25, 0x42	; 66
 238:	43 e0       	ldi	r20, 0x03	; 3
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	93 df       	rcall	.-218    	; 0x164 <mov>
	}
 23e:	08 95       	ret

00000240 <main>:

	int main()
	 {
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
	 
	 DDRC=0x00;
 250:	14 ba       	out	0x14, r1	; 20
	 PORTC=0x0f;
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	85 bb       	out	0x15, r24	; 21
	 
	 servo_init();
 256:	f8 de       	rcall	.-528    	; 0x48 <servo_init>
	 
		stop();
 258:	d6 df       	rcall	.-84     	; 0x206 <stop>
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25e:	2c e2       	ldi	r18, 0x2C	; 44
 260:	31 e0       	ldi	r19, 0x01	; 1
 262:	f9 01       	movw	r30, r18
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 268:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26a:	d9 f7       	brne	.-10     	; 0x262 <main+0x22>
	 _delay_ms(2000);
	 
	 while(1)
	   {
		if((PINC & 0x01) == 0x00)
 26c:	98 99       	sbic	0x13, 0	; 19
 26e:	fe cf       	rjmp	.-4      	; 0x26c <main+0x2c>
		{
			while((PINC & 0x01)==0x00);
 270:	98 9b       	sbis	0x13, 0	; 19
 272:	fe cf       	rjmp	.-4      	; 0x270 <main+0x30>
 274:	ca e5       	ldi	r28, 0x5A	; 90
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	00 e6       	ldi	r16, 0x60	; 96
 27a:	1a ee       	ldi	r17, 0xEA	; 234
			
// ***************************************** Right Leg Up ***************************************
			
			for (char i=0;i<=120;i++)
			{
			mov(90+i,3);
 27c:	be 01       	movw	r22, r28
 27e:	88 27       	eor	r24, r24
 280:	77 fd       	sbrc	r23, 7
 282:	80 95       	com	r24
 284:	98 2f       	mov	r25, r24
 286:	5a d2       	rcall	.+1204   	; 0x73c <__floatsisf>
 288:	43 e0       	ldi	r20, 0x03	; 3
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	6b df       	rcall	.-298    	; 0x164 <mov>
 28e:	c8 01       	movw	r24, r16
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x50>
 294:	21 96       	adiw	r28, 0x01	; 1
		{
			while((PINC & 0x01)==0x00);
			
// ***************************************** Right Leg Up ***************************************
			
			for (char i=0;i<=120;i++)
 296:	c3 3d       	cpi	r28, 0xD3	; 211
 298:	d1 05       	cpc	r29, r1
 29a:	81 f7       	brne	.-32     	; 0x27c <main+0x3c>
 29c:	ca e5       	ldi	r28, 0x5A	; 90
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	00 e6       	ldi	r16, 0x60	; 96
 2a2:	1a ee       	ldi	r17, 0xEA	; 234
			_delay_ms(20);
			}
			
			for (char i=0;i<=100;i++)
			{
			mov(90-i,2);
 2a4:	be 01       	movw	r22, r28
 2a6:	88 27       	eor	r24, r24
 2a8:	77 fd       	sbrc	r23, 7
 2aa:	80 95       	com	r24
 2ac:	98 2f       	mov	r25, r24
 2ae:	46 d2       	rcall	.+1164   	; 0x73c <__floatsisf>
 2b0:	42 e0       	ldi	r20, 0x02	; 2
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	57 df       	rcall	.-338    	; 0x164 <mov>
 2b6:	c8 01       	movw	r24, r16
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x78>
 2bc:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(90+i,3);
			_delay_ms(20);
			}
			
			for (char i=0;i<=100;i++)
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	c5 3f       	cpi	r28, 0xF5	; 245
 2c2:	d8 07       	cpc	r29, r24
 2c4:	79 f7       	brne	.-34     	; 0x2a4 <main+0x64>
 2c6:	80 e7       	ldi	r24, 0x70	; 112
 2c8:	97 e1       	ldi	r25, 0x17	; 23
 2ca:	2c e2       	ldi	r18, 0x2C	; 44
 2cc:	31 e0       	ldi	r19, 0x01	; 1
 2ce:	f9 01       	movw	r30, r18
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <main+0x8e>
 2d8:	c6 ef       	ldi	r28, 0xF6	; 246
 2da:	df ef       	ldi	r29, 0xFF	; 255
 2dc:	00 e6       	ldi	r16, 0x60	; 96
 2de:	1a ee       	ldi	r17, 0xEA	; 234
			
// **************************************** Right Leg Down **************************************
			
			for (char i=0;i<=100;i++)
			{
			mov((-10+i),2);
 2e0:	be 01       	movw	r22, r28
 2e2:	88 27       	eor	r24, r24
 2e4:	77 fd       	sbrc	r23, 7
 2e6:	80 95       	com	r24
 2e8:	98 2f       	mov	r25, r24
 2ea:	28 d2       	rcall	.+1104   	; 0x73c <__floatsisf>
 2ec:	42 e0       	ldi	r20, 0x02	; 2
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	39 df       	rcall	.-398    	; 0x164 <mov>
 2f2:	c8 01       	movw	r24, r16
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0xb4>
 2f8:	21 96       	adiw	r28, 0x01	; 1
			
			_delay_ms(600);
			
// **************************************** Right Leg Down **************************************
			
			for (char i=0;i<=100;i++)
 2fa:	cb 35       	cpi	r28, 0x5B	; 91
 2fc:	d1 05       	cpc	r29, r1
 2fe:	81 f7       	brne	.-32     	; 0x2e0 <main+0xa0>
 300:	cc ed       	ldi	r28, 0xDC	; 220
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	00 e6       	ldi	r16, 0x60	; 96
 306:	1a ee       	ldi	r17, 0xEA	; 234
			_delay_ms(20);
			}
			
			for (char i=0;i<=130;i++)
			{
			mov(220-i,3);
 308:	be 01       	movw	r22, r28
 30a:	88 27       	eor	r24, r24
 30c:	77 fd       	sbrc	r23, 7
 30e:	80 95       	com	r24
 310:	98 2f       	mov	r25, r24
 312:	14 d2       	rcall	.+1064   	; 0x73c <__floatsisf>
 314:	43 e0       	ldi	r20, 0x03	; 3
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	25 df       	rcall	.-438    	; 0x164 <mov>
 31a:	c8 01       	movw	r24, r16
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0xdc>
 320:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov((-10+i),2);
			_delay_ms(20);
			}
			
			for (char i=0;i<=130;i++)
 322:	c9 35       	cpi	r28, 0x59	; 89
 324:	d1 05       	cpc	r29, r1
 326:	81 f7       	brne	.-32     	; 0x308 <main+0xc8>
 328:	80 e7       	ldi	r24, 0x70	; 112
 32a:	97 e1       	ldi	r25, 0x17	; 23
 32c:	2c e2       	ldi	r18, 0x2C	; 44
 32e:	31 e0       	ldi	r19, 0x01	; 1
 330:	f9 01       	movw	r30, r18
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 336:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 338:	d9 f7       	brne	.-10     	; 0x330 <main+0xf0>
 33a:	ca e5       	ldi	r28, 0x5A	; 90
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	00 e6       	ldi	r16, 0x60	; 96
 340:	1a ee       	ldi	r17, 0xEA	; 234
			
// ***************************************** Left Leg Up ***************************************
			
			for (char i=0;i<=130;i++)
			{
			mov(90-i,2);
 342:	be 01       	movw	r22, r28
 344:	88 27       	eor	r24, r24
 346:	77 fd       	sbrc	r23, 7
 348:	80 95       	com	r24
 34a:	98 2f       	mov	r25, r24
 34c:	f7 d1       	rcall	.+1006   	; 0x73c <__floatsisf>
 34e:	42 e0       	ldi	r20, 0x02	; 2
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	08 df       	rcall	.-496    	; 0x164 <mov>
 354:	c8 01       	movw	r24, r16
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x116>
 35a:	21 97       	sbiw	r28, 0x01	; 1
			
			_delay_ms(600);
			
// ***************************************** Left Leg Up ***************************************
			
			for (char i=0;i<=130;i++)
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	c7 3d       	cpi	r28, 0xD7	; 215
 360:	d8 07       	cpc	r29, r24
 362:	79 f7       	brne	.-34     	; 0x342 <main+0x102>
 364:	ca e5       	ldi	r28, 0x5A	; 90
 366:	d0 e0       	ldi	r29, 0x00	; 0
 368:	00 e6       	ldi	r16, 0x60	; 96
 36a:	1a ee       	ldi	r17, 0xEA	; 234
			_delay_ms(20);
			}
			
			for (char i=0;i<=120;i++)
			{
			mov(90+i,3);
 36c:	be 01       	movw	r22, r28
 36e:	88 27       	eor	r24, r24
 370:	77 fd       	sbrc	r23, 7
 372:	80 95       	com	r24
 374:	98 2f       	mov	r25, r24
 376:	e2 d1       	rcall	.+964    	; 0x73c <__floatsisf>
 378:	43 e0       	ldi	r20, 0x03	; 3
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	f3 de       	rcall	.-538    	; 0x164 <mov>
 37e:	c8 01       	movw	r24, r16
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x140>
 384:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(90-i,2);
			_delay_ms(20);
			}
			
			for (char i=0;i<=120;i++)
 386:	c3 3d       	cpi	r28, 0xD3	; 211
 388:	d1 05       	cpc	r29, r1
 38a:	81 f7       	brne	.-32     	; 0x36c <main+0x12c>
 38c:	80 e7       	ldi	r24, 0x70	; 112
 38e:	97 e1       	ldi	r25, 0x17	; 23
 390:	2c e2       	ldi	r18, 0x2C	; 44
 392:	31 e0       	ldi	r19, 0x01	; 1
 394:	f9 01       	movw	r30, r18
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <main+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 39a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 39c:	d9 f7       	brne	.-10     	; 0x394 <main+0x154>
 39e:	c2 ed       	ldi	r28, 0xD2	; 210
 3a0:	d0 e0       	ldi	r29, 0x00	; 0
 3a2:	00 e6       	ldi	r16, 0x60	; 96
 3a4:	1a ee       	ldi	r17, 0xEA	; 234
			
// **************************************** Left Leg Down **************************************
			
			for (char i=0;i<=120;i++)
			{
			mov(210-i,3);
 3a6:	be 01       	movw	r22, r28
 3a8:	88 27       	eor	r24, r24
 3aa:	77 fd       	sbrc	r23, 7
 3ac:	80 95       	com	r24
 3ae:	98 2f       	mov	r25, r24
 3b0:	c5 d1       	rcall	.+906    	; 0x73c <__floatsisf>
 3b2:	43 e0       	ldi	r20, 0x03	; 3
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	d6 de       	rcall	.-596    	; 0x164 <mov>
 3b8:	c8 01       	movw	r24, r16
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x17a>
 3be:	21 97       	sbiw	r28, 0x01	; 1
			
			_delay_ms(600);
			
// **************************************** Left Leg Down **************************************
			
			for (char i=0;i<=120;i++)
 3c0:	c9 35       	cpi	r28, 0x59	; 89
 3c2:	d1 05       	cpc	r29, r1
 3c4:	81 f7       	brne	.-32     	; 0x3a6 <main+0x166>
 3c6:	c8 ed       	ldi	r28, 0xD8	; 216
 3c8:	df ef       	ldi	r29, 0xFF	; 255
 3ca:	00 e6       	ldi	r16, 0x60	; 96
 3cc:	1a ee       	ldi	r17, 0xEA	; 234
			_delay_ms(20);
			}
			
			for (char i=0;i<=140;i++)
			{
			mov((-40+i),2);
 3ce:	be 01       	movw	r22, r28
 3d0:	88 27       	eor	r24, r24
 3d2:	77 fd       	sbrc	r23, 7
 3d4:	80 95       	com	r24
 3d6:	98 2f       	mov	r25, r24
 3d8:	b1 d1       	rcall	.+866    	; 0x73c <__floatsisf>
 3da:	42 e0       	ldi	r20, 0x02	; 2
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	c2 de       	rcall	.-636    	; 0x164 <mov>
 3e0:	c8 01       	movw	r24, r16
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x1a2>
 3e6:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(210-i,3);
			_delay_ms(20);
			}
			
			for (char i=0;i<=140;i++)
 3e8:	c5 36       	cpi	r28, 0x65	; 101
 3ea:	d1 05       	cpc	r29, r1
 3ec:	81 f7       	brne	.-32     	; 0x3ce <main+0x18e>
 3ee:	80 e1       	ldi	r24, 0x10	; 16
 3f0:	97 e2       	ldi	r25, 0x27	; 39
 3f2:	2c e2       	ldi	r18, 0x2C	; 44
 3f4:	31 e0       	ldi	r19, 0x01	; 1
 3f6:	f9 01       	movw	r30, r18
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x1b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3fe:	d9 f7       	brne	.-10     	; 0x3f6 <main+0x1b6>
			
			_delay_ms(1000);
			
// **************************************** Flip **************************************
			
			mov(200,3);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	88 e4       	ldi	r24, 0x48	; 72
 406:	93 e4       	ldi	r25, 0x43	; 67
 408:	43 e0       	ldi	r20, 0x03	; 3
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	ab de       	rcall	.-682    	; 0x164 <mov>
			mov(-40,2);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e2       	ldi	r24, 0x20	; 32
 414:	92 ec       	ldi	r25, 0xC2	; 194
 416:	42 e0       	ldi	r20, 0x02	; 2
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	a4 de       	rcall	.-696    	; 0x164 <mov>
 41c:	80 e2       	ldi	r24, 0x20	; 32
 41e:	9e e4       	ldi	r25, 0x4E	; 78
 420:	2c e2       	ldi	r18, 0x2C	; 44
 422:	31 e0       	ldi	r19, 0x01	; 1
 424:	f9 01       	movw	r30, r18
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <main+0x1e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42c:	d9 f7       	brne	.-10     	; 0x424 <main+0x1e4>
			
			_delay_ms(2000);
			
			mov(125,0);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	8a ef       	ldi	r24, 0xFA	; 250
 434:	92 e4       	ldi	r25, 0x42	; 66
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	94 de       	rcall	.-728    	; 0x164 <mov>
			mov(55,1);
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	8c e5       	ldi	r24, 0x5C	; 92
 442:	92 e4       	ldi	r25, 0x42	; 66
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	8d de       	rcall	.-742    	; 0x164 <mov>
 44a:	88 e8       	ldi	r24, 0x88	; 136
 44c:	93 e1       	ldi	r25, 0x13	; 19
 44e:	2c e2       	ldi	r18, 0x2C	; 44
 450:	31 e0       	ldi	r19, 0x01	; 1
 452:	f9 01       	movw	r30, r18
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <main+0x214>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 458:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45a:	d9 f7       	brne	.-10     	; 0x452 <main+0x212>
			_delay_ms(500);
			mov(55,0);
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	8c e5       	ldi	r24, 0x5C	; 92
 462:	92 e4       	ldi	r25, 0x42	; 66
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	7d de       	rcall	.-774    	; 0x164 <mov>
			mov(125,1);
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	8a ef       	ldi	r24, 0xFA	; 250
 470:	92 e4       	ldi	r25, 0x42	; 66
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	76 de       	rcall	.-788    	; 0x164 <mov>
 478:	88 e8       	ldi	r24, 0x88	; 136
 47a:	93 e1       	ldi	r25, 0x13	; 19
 47c:	2c e2       	ldi	r18, 0x2C	; 44
 47e:	31 e0       	ldi	r19, 0x01	; 1
 480:	f9 01       	movw	r30, r18
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__stack+0x23>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 486:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 488:	d9 f7       	brne	.-10     	; 0x480 <__stack+0x21>
			_delay_ms(500);
			mov(90,0);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	84 eb       	ldi	r24, 0xB4	; 180
 490:	92 e4       	ldi	r25, 0x42	; 66
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	66 de       	rcall	.-820    	; 0x164 <mov>
			mov(90,1);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	84 eb       	ldi	r24, 0xB4	; 180
 49e:	92 e4       	ldi	r25, 0x42	; 66
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	5f de       	rcall	.-834    	; 0x164 <mov>
 4a6:	88 e8       	ldi	r24, 0x88	; 136
 4a8:	93 e1       	ldi	r25, 0x13	; 19
 4aa:	2c e2       	ldi	r18, 0x2C	; 44
 4ac:	31 e0       	ldi	r19, 0x01	; 1
 4ae:	f9 01       	movw	r30, r18
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__stack+0x51>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b6:	d9 f7       	brne	.-10     	; 0x4ae <__stack+0x4f>
			_delay_ms(500);
			
			mov(90,3);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	84 eb       	ldi	r24, 0xB4	; 180
 4be:	92 e4       	ldi	r25, 0x42	; 66
 4c0:	43 e0       	ldi	r20, 0x03	; 3
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	4f de       	rcall	.-866    	; 0x164 <mov>
			mov(90,2);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	84 eb       	ldi	r24, 0xB4	; 180
 4cc:	92 e4       	ldi	r25, 0x42	; 66
 4ce:	42 e0       	ldi	r20, 0x02	; 2
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	48 de       	rcall	.-880    	; 0x164 <mov>
 4d4:	80 e1       	ldi	r24, 0x10	; 16
 4d6:	97 e2       	ldi	r25, 0x27	; 39
 4d8:	2c e2       	ldi	r18, 0x2C	; 44
 4da:	31 e0       	ldi	r19, 0x01	; 1
 4dc:	f9 01       	movw	r30, r18
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__stack+0x7f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <__stack+0x7d>
 4e6:	10 e0       	ldi	r17, 0x00	; 0
 4e8:	98 ec       	ldi	r25, 0xC8	; 200
 4ea:	e9 2e       	mov	r14, r25
 4ec:	9f ea       	ldi	r25, 0xAF	; 175
 4ee:	f9 2e       	mov	r15, r25
 4f0:	8c e2       	ldi	r24, 0x2C	; 44
 4f2:	c8 2e       	mov	r12, r24
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	d8 2e       	mov	r13, r24
 4f8:	10 c0       	rjmp	.+32     	; 0x51a <__stack+0xbb>
			while(1)
			{
			
			for (char i=0;i<=40;i++)		// Right leg forward
			{
			mov(90+i,3);
 4fa:	61 2f       	mov	r22, r17
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	66 5a       	subi	r22, 0xA6	; 166
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	88 27       	eor	r24, r24
 504:	77 fd       	sbrc	r23, 7
 506:	80 95       	com	r24
 508:	98 2f       	mov	r25, r24
 50a:	18 d1       	rcall	.+560    	; 0x73c <__floatsisf>
 50c:	43 e0       	ldi	r20, 0x03	; 3
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	29 de       	rcall	.-942    	; 0x164 <mov>
 512:	c7 01       	movw	r24, r14
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <__stack+0xb5>
// **************************************** Walking **************************************
			
			while(1)
			{
			
			for (char i=0;i<=40;i++)		// Right leg forward
 518:	1f 5f       	subi	r17, 0xFF	; 255
 51a:	19 32       	cpi	r17, 0x29	; 41
 51c:	70 f3       	brcs	.-36     	; 0x4fa <__stack+0x9b>
 51e:	ca e5       	ldi	r28, 0x5A	; 90
 520:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=20;i++)
			{
			mov(90+i,1);
 522:	be 01       	movw	r22, r28
 524:	88 27       	eor	r24, r24
 526:	77 fd       	sbrc	r23, 7
 528:	80 95       	com	r24
 52a:	98 2f       	mov	r25, r24
 52c:	07 d1       	rcall	.+526    	; 0x73c <__floatsisf>
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	18 de       	rcall	.-976    	; 0x164 <mov>
 534:	c7 01       	movw	r24, r14
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <__stack+0xd7>
 53a:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(90+i,3);
			_delay_ms(15);
			}
			
			for (char i=0;i<=20;i++)
 53c:	cf 36       	cpi	r28, 0x6F	; 111
 53e:	d1 05       	cpc	r29, r1
 540:	81 f7       	brne	.-32     	; 0x522 <__stack+0xc3>
 542:	ca e5       	ldi	r28, 0x5A	; 90
 544:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=30;i++)
			{
			mov(90+i,0);
 546:	be 01       	movw	r22, r28
 548:	88 27       	eor	r24, r24
 54a:	77 fd       	sbrc	r23, 7
 54c:	80 95       	com	r24
 54e:	98 2f       	mov	r25, r24
 550:	f5 d0       	rcall	.+490    	; 0x73c <__floatsisf>
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	06 de       	rcall	.-1012   	; 0x164 <mov>
 558:	c7 01       	movw	r24, r14
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <__stack+0xfb>
 55e:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(90+i,1);
			_delay_ms(15);
			}
			
			for (char i=0;i<=30;i++)
 560:	c9 37       	cpi	r28, 0x79	; 121
 562:	d1 05       	cpc	r29, r1
 564:	81 f7       	brne	.-32     	; 0x546 <__stack+0xe7>
 566:	c2 e8       	ldi	r28, 0x82	; 130
 568:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++)
			{
			mov(130-i,3);
 56a:	be 01       	movw	r22, r28
 56c:	88 27       	eor	r24, r24
 56e:	77 fd       	sbrc	r23, 7
 570:	80 95       	com	r24
 572:	98 2f       	mov	r25, r24
 574:	e3 d0       	rcall	.+454    	; 0x73c <__floatsisf>
 576:	43 e0       	ldi	r20, 0x03	; 3
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	f4 dd       	rcall	.-1048   	; 0x164 <mov>
 57c:	c7 01       	movw	r24, r14
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <__stack+0x11f>
 582:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(90+i,0);
			_delay_ms(15);
			}
			
			for (char i=0;i<=40;i++)
 584:	c9 35       	cpi	r28, 0x59	; 89
 586:	d1 05       	cpc	r29, r1
 588:	81 f7       	brne	.-32     	; 0x56a <__stack+0x10b>
 58a:	ca e5       	ldi	r28, 0x5A	; 90
 58c:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=35;i++)		// Left leg forward
			{
			mov(90-i,2);
 58e:	be 01       	movw	r22, r28
 590:	88 27       	eor	r24, r24
 592:	77 fd       	sbrc	r23, 7
 594:	80 95       	com	r24
 596:	98 2f       	mov	r25, r24
 598:	d1 d0       	rcall	.+418    	; 0x73c <__floatsisf>
 59a:	42 e0       	ldi	r20, 0x02	; 2
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	e2 dd       	rcall	.-1084   	; 0x164 <mov>
 5a0:	c7 01       	movw	r24, r14
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <__stack+0x143>
 5a6:	21 97       	sbiw	r28, 0x01	; 1
			{
			mov(130-i,3);
			_delay_ms(15);
			}
			
			for (char i=0;i<=35;i++)		// Left leg forward
 5a8:	c6 33       	cpi	r28, 0x36	; 54
 5aa:	d1 05       	cpc	r29, r1
 5ac:	81 f7       	brne	.-32     	; 0x58e <__stack+0x12f>
 5ae:	ca e5       	ldi	r28, 0x5A	; 90
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(15);
			}
			
			for (char i=0;i<=5;i++)
			{
			mov(90+i,0);
 5b2:	be 01       	movw	r22, r28
 5b4:	88 27       	eor	r24, r24
 5b6:	77 fd       	sbrc	r23, 7
 5b8:	80 95       	com	r24
 5ba:	98 2f       	mov	r25, r24
 5bc:	bf d0       	rcall	.+382    	; 0x73c <__floatsisf>
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	d0 dd       	rcall	.-1120   	; 0x164 <mov>
 5c4:	c7 01       	movw	r24, r14
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__stack+0x167>
 5ca:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(90-i,2);
			_delay_ms(15);
			}
			
			for (char i=0;i<=5;i++)
 5cc:	c0 36       	cpi	r28, 0x60	; 96
 5ce:	d1 05       	cpc	r29, r1
 5d0:	81 f7       	brne	.-32     	; 0x5b2 <__stack+0x153>
			_delay_ms(15);
			}
			
			for (char i=0;i<=0;i++)
			{
			mov(90+i,1);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	84 eb       	ldi	r24, 0xB4	; 180
 5d8:	92 e4       	ldi	r25, 0x42	; 66
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	c2 dd       	rcall	.-1148   	; 0x164 <mov>
 5e0:	80 e9       	ldi	r24, 0x90	; 144
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	f6 01       	movw	r30, r12
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <__stack+0x187>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ec:	d9 f7       	brne	.-10     	; 0x5e4 <__stack+0x185>
 5ee:	c7 e3       	ldi	r28, 0x37	; 55
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(40);
			}
			
			for (char i=0;i<=35;i++)
			{
			mov(55+i,2);
 5f2:	be 01       	movw	r22, r28
 5f4:	88 27       	eor	r24, r24
 5f6:	77 fd       	sbrc	r23, 7
 5f8:	80 95       	com	r24
 5fa:	98 2f       	mov	r25, r24
 5fc:	9f d0       	rcall	.+318    	; 0x73c <__floatsisf>
 5fe:	42 e0       	ldi	r20, 0x02	; 2
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	b0 dd       	rcall	.-1184   	; 0x164 <mov>
 604:	c7 01       	movw	r24, r14
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <__stack+0x1a7>
 60a:	21 96       	adiw	r28, 0x01	; 1
			{
			mov(90+i,1);
			_delay_ms(40);
			}
			
			for (char i=0;i<=35;i++)
 60c:	cb 35       	cpi	r28, 0x5B	; 91
 60e:	d1 05       	cpc	r29, r1
 610:	81 f7       	brne	.-32     	; 0x5f2 <__stack+0x193>
 612:	10 e0       	ldi	r17, 0x00	; 0
 614:	72 cf       	rjmp	.-284    	; 0x4fa <__stack+0x9b>

00000616 <__subsf3>:
 616:	50 58       	subi	r21, 0x80	; 128

00000618 <__addsf3>:
 618:	bb 27       	eor	r27, r27
 61a:	aa 27       	eor	r26, r26
 61c:	0e d0       	rcall	.+28     	; 0x63a <__addsf3x>
 61e:	e0 c0       	rjmp	.+448    	; 0x7e0 <__fp_round>
 620:	d1 d0       	rcall	.+418    	; 0x7c4 <__fp_pscA>
 622:	30 f0       	brcs	.+12     	; 0x630 <__addsf3+0x18>
 624:	d6 d0       	rcall	.+428    	; 0x7d2 <__fp_pscB>
 626:	20 f0       	brcs	.+8      	; 0x630 <__addsf3+0x18>
 628:	31 f4       	brne	.+12     	; 0x636 <__addsf3+0x1e>
 62a:	9f 3f       	cpi	r25, 0xFF	; 255
 62c:	11 f4       	brne	.+4      	; 0x632 <__addsf3+0x1a>
 62e:	1e f4       	brtc	.+6      	; 0x636 <__addsf3+0x1e>
 630:	c6 c0       	rjmp	.+396    	; 0x7be <__fp_nan>
 632:	0e f4       	brtc	.+2      	; 0x636 <__addsf3+0x1e>
 634:	e0 95       	com	r30
 636:	e7 fb       	bst	r30, 7
 638:	bc c0       	rjmp	.+376    	; 0x7b2 <__fp_inf>

0000063a <__addsf3x>:
 63a:	e9 2f       	mov	r30, r25
 63c:	e2 d0       	rcall	.+452    	; 0x802 <__fp_split3>
 63e:	80 f3       	brcs	.-32     	; 0x620 <__addsf3+0x8>
 640:	ba 17       	cp	r27, r26
 642:	62 07       	cpc	r22, r18
 644:	73 07       	cpc	r23, r19
 646:	84 07       	cpc	r24, r20
 648:	95 07       	cpc	r25, r21
 64a:	18 f0       	brcs	.+6      	; 0x652 <__addsf3x+0x18>
 64c:	71 f4       	brne	.+28     	; 0x66a <__addsf3x+0x30>
 64e:	9e f5       	brtc	.+102    	; 0x6b6 <__addsf3x+0x7c>
 650:	fa c0       	rjmp	.+500    	; 0x846 <__fp_zero>
 652:	0e f4       	brtc	.+2      	; 0x656 <__addsf3x+0x1c>
 654:	e0 95       	com	r30
 656:	0b 2e       	mov	r0, r27
 658:	ba 2f       	mov	r27, r26
 65a:	a0 2d       	mov	r26, r0
 65c:	0b 01       	movw	r0, r22
 65e:	b9 01       	movw	r22, r18
 660:	90 01       	movw	r18, r0
 662:	0c 01       	movw	r0, r24
 664:	ca 01       	movw	r24, r20
 666:	a0 01       	movw	r20, r0
 668:	11 24       	eor	r1, r1
 66a:	ff 27       	eor	r31, r31
 66c:	59 1b       	sub	r21, r25
 66e:	99 f0       	breq	.+38     	; 0x696 <__addsf3x+0x5c>
 670:	59 3f       	cpi	r21, 0xF9	; 249
 672:	50 f4       	brcc	.+20     	; 0x688 <__addsf3x+0x4e>
 674:	50 3e       	cpi	r21, 0xE0	; 224
 676:	68 f1       	brcs	.+90     	; 0x6d2 <__addsf3x+0x98>
 678:	1a 16       	cp	r1, r26
 67a:	f0 40       	sbci	r31, 0x00	; 0
 67c:	a2 2f       	mov	r26, r18
 67e:	23 2f       	mov	r18, r19
 680:	34 2f       	mov	r19, r20
 682:	44 27       	eor	r20, r20
 684:	58 5f       	subi	r21, 0xF8	; 248
 686:	f3 cf       	rjmp	.-26     	; 0x66e <__addsf3x+0x34>
 688:	46 95       	lsr	r20
 68a:	37 95       	ror	r19
 68c:	27 95       	ror	r18
 68e:	a7 95       	ror	r26
 690:	f0 40       	sbci	r31, 0x00	; 0
 692:	53 95       	inc	r21
 694:	c9 f7       	brne	.-14     	; 0x688 <__addsf3x+0x4e>
 696:	7e f4       	brtc	.+30     	; 0x6b6 <__addsf3x+0x7c>
 698:	1f 16       	cp	r1, r31
 69a:	ba 0b       	sbc	r27, r26
 69c:	62 0b       	sbc	r22, r18
 69e:	73 0b       	sbc	r23, r19
 6a0:	84 0b       	sbc	r24, r20
 6a2:	ba f0       	brmi	.+46     	; 0x6d2 <__addsf3x+0x98>
 6a4:	91 50       	subi	r25, 0x01	; 1
 6a6:	a1 f0       	breq	.+40     	; 0x6d0 <__addsf3x+0x96>
 6a8:	ff 0f       	add	r31, r31
 6aa:	bb 1f       	adc	r27, r27
 6ac:	66 1f       	adc	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	c2 f7       	brpl	.-16     	; 0x6a4 <__addsf3x+0x6a>
 6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <__addsf3x+0x98>
 6b6:	ba 0f       	add	r27, r26
 6b8:	62 1f       	adc	r22, r18
 6ba:	73 1f       	adc	r23, r19
 6bc:	84 1f       	adc	r24, r20
 6be:	48 f4       	brcc	.+18     	; 0x6d2 <__addsf3x+0x98>
 6c0:	87 95       	ror	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	b7 95       	ror	r27
 6c8:	f7 95       	ror	r31
 6ca:	9e 3f       	cpi	r25, 0xFE	; 254
 6cc:	08 f0       	brcs	.+2      	; 0x6d0 <__addsf3x+0x96>
 6ce:	b3 cf       	rjmp	.-154    	; 0x636 <__addsf3+0x1e>
 6d0:	93 95       	inc	r25
 6d2:	88 0f       	add	r24, r24
 6d4:	08 f0       	brcs	.+2      	; 0x6d8 <__addsf3x+0x9e>
 6d6:	99 27       	eor	r25, r25
 6d8:	ee 0f       	add	r30, r30
 6da:	97 95       	ror	r25
 6dc:	87 95       	ror	r24
 6de:	08 95       	ret

000006e0 <__fixunssfsi>:
 6e0:	98 d0       	rcall	.+304    	; 0x812 <__fp_splitA>
 6e2:	88 f0       	brcs	.+34     	; 0x706 <__fixunssfsi+0x26>
 6e4:	9f 57       	subi	r25, 0x7F	; 127
 6e6:	90 f0       	brcs	.+36     	; 0x70c <__fixunssfsi+0x2c>
 6e8:	b9 2f       	mov	r27, r25
 6ea:	99 27       	eor	r25, r25
 6ec:	b7 51       	subi	r27, 0x17	; 23
 6ee:	a0 f0       	brcs	.+40     	; 0x718 <__fixunssfsi+0x38>
 6f0:	d1 f0       	breq	.+52     	; 0x726 <__fixunssfsi+0x46>
 6f2:	66 0f       	add	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	88 1f       	adc	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	1a f0       	brmi	.+6      	; 0x702 <__fixunssfsi+0x22>
 6fc:	ba 95       	dec	r27
 6fe:	c9 f7       	brne	.-14     	; 0x6f2 <__fixunssfsi+0x12>
 700:	12 c0       	rjmp	.+36     	; 0x726 <__fixunssfsi+0x46>
 702:	b1 30       	cpi	r27, 0x01	; 1
 704:	81 f0       	breq	.+32     	; 0x726 <__fixunssfsi+0x46>
 706:	9f d0       	rcall	.+318    	; 0x846 <__fp_zero>
 708:	b1 e0       	ldi	r27, 0x01	; 1
 70a:	08 95       	ret
 70c:	9c c0       	rjmp	.+312    	; 0x846 <__fp_zero>
 70e:	67 2f       	mov	r22, r23
 710:	78 2f       	mov	r23, r24
 712:	88 27       	eor	r24, r24
 714:	b8 5f       	subi	r27, 0xF8	; 248
 716:	39 f0       	breq	.+14     	; 0x726 <__fixunssfsi+0x46>
 718:	b9 3f       	cpi	r27, 0xF9	; 249
 71a:	cc f3       	brlt	.-14     	; 0x70e <__fixunssfsi+0x2e>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b3 95       	inc	r27
 724:	d9 f7       	brne	.-10     	; 0x71c <__fixunssfsi+0x3c>
 726:	3e f4       	brtc	.+14     	; 0x736 <__fixunssfsi+0x56>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <__floatunsisf>:
 738:	e8 94       	clt
 73a:	09 c0       	rjmp	.+18     	; 0x74e <__floatsisf+0x12>

0000073c <__floatsisf>:
 73c:	97 fb       	bst	r25, 7
 73e:	3e f4       	brtc	.+14     	; 0x74e <__floatsisf+0x12>
 740:	90 95       	com	r25
 742:	80 95       	com	r24
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	99 23       	and	r25, r25
 750:	a9 f0       	breq	.+42     	; 0x77c <__floatsisf+0x40>
 752:	f9 2f       	mov	r31, r25
 754:	96 e9       	ldi	r25, 0x96	; 150
 756:	bb 27       	eor	r27, r27
 758:	93 95       	inc	r25
 75a:	f6 95       	lsr	r31
 75c:	87 95       	ror	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b7 95       	ror	r27
 764:	f1 11       	cpse	r31, r1
 766:	f8 cf       	rjmp	.-16     	; 0x758 <__floatsisf+0x1c>
 768:	fa f4       	brpl	.+62     	; 0x7a8 <__floatsisf+0x6c>
 76a:	bb 0f       	add	r27, r27
 76c:	11 f4       	brne	.+4      	; 0x772 <__floatsisf+0x36>
 76e:	60 ff       	sbrs	r22, 0
 770:	1b c0       	rjmp	.+54     	; 0x7a8 <__floatsisf+0x6c>
 772:	6f 5f       	subi	r22, 0xFF	; 255
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	16 c0       	rjmp	.+44     	; 0x7a8 <__floatsisf+0x6c>
 77c:	88 23       	and	r24, r24
 77e:	11 f0       	breq	.+4      	; 0x784 <__floatsisf+0x48>
 780:	96 e9       	ldi	r25, 0x96	; 150
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <__floatsisf+0x6a>
 784:	77 23       	and	r23, r23
 786:	21 f0       	breq	.+8      	; 0x790 <__floatsisf+0x54>
 788:	9e e8       	ldi	r25, 0x8E	; 142
 78a:	87 2f       	mov	r24, r23
 78c:	76 2f       	mov	r23, r22
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__floatsisf+0x5e>
 790:	66 23       	and	r22, r22
 792:	71 f0       	breq	.+28     	; 0x7b0 <__floatsisf+0x74>
 794:	96 e8       	ldi	r25, 0x86	; 134
 796:	86 2f       	mov	r24, r22
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	2a f0       	brmi	.+10     	; 0x7a8 <__floatsisf+0x6c>
 79e:	9a 95       	dec	r25
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	da f7       	brpl	.-10     	; 0x79e <__floatsisf+0x62>
 7a8:	88 0f       	add	r24, r24
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret

000007b2 <__fp_inf>:
 7b2:	97 f9       	bld	r25, 7
 7b4:	9f 67       	ori	r25, 0x7F	; 127
 7b6:	80 e8       	ldi	r24, 0x80	; 128
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	08 95       	ret

000007be <__fp_nan>:
 7be:	9f ef       	ldi	r25, 0xFF	; 255
 7c0:	80 ec       	ldi	r24, 0xC0	; 192
 7c2:	08 95       	ret

000007c4 <__fp_pscA>:
 7c4:	00 24       	eor	r0, r0
 7c6:	0a 94       	dec	r0
 7c8:	16 16       	cp	r1, r22
 7ca:	17 06       	cpc	r1, r23
 7cc:	18 06       	cpc	r1, r24
 7ce:	09 06       	cpc	r0, r25
 7d0:	08 95       	ret

000007d2 <__fp_pscB>:
 7d2:	00 24       	eor	r0, r0
 7d4:	0a 94       	dec	r0
 7d6:	12 16       	cp	r1, r18
 7d8:	13 06       	cpc	r1, r19
 7da:	14 06       	cpc	r1, r20
 7dc:	05 06       	cpc	r0, r21
 7de:	08 95       	ret

000007e0 <__fp_round>:
 7e0:	09 2e       	mov	r0, r25
 7e2:	03 94       	inc	r0
 7e4:	00 0c       	add	r0, r0
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_round+0xc>
 7e8:	88 23       	and	r24, r24
 7ea:	52 f0       	brmi	.+20     	; 0x800 <__fp_round+0x20>
 7ec:	bb 0f       	add	r27, r27
 7ee:	40 f4       	brcc	.+16     	; 0x800 <__fp_round+0x20>
 7f0:	bf 2b       	or	r27, r31
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <__fp_round+0x18>
 7f4:	60 ff       	sbrs	r22, 0
 7f6:	04 c0       	rjmp	.+8      	; 0x800 <__fp_round+0x20>
 7f8:	6f 5f       	subi	r22, 0xFF	; 255
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	08 95       	ret

00000802 <__fp_split3>:
 802:	57 fd       	sbrc	r21, 7
 804:	90 58       	subi	r25, 0x80	; 128
 806:	44 0f       	add	r20, r20
 808:	55 1f       	adc	r21, r21
 80a:	59 f0       	breq	.+22     	; 0x822 <__fp_splitA+0x10>
 80c:	5f 3f       	cpi	r21, 0xFF	; 255
 80e:	71 f0       	breq	.+28     	; 0x82c <__fp_splitA+0x1a>
 810:	47 95       	ror	r20

00000812 <__fp_splitA>:
 812:	88 0f       	add	r24, r24
 814:	97 fb       	bst	r25, 7
 816:	99 1f       	adc	r25, r25
 818:	61 f0       	breq	.+24     	; 0x832 <__fp_splitA+0x20>
 81a:	9f 3f       	cpi	r25, 0xFF	; 255
 81c:	79 f0       	breq	.+30     	; 0x83c <__fp_splitA+0x2a>
 81e:	87 95       	ror	r24
 820:	08 95       	ret
 822:	12 16       	cp	r1, r18
 824:	13 06       	cpc	r1, r19
 826:	14 06       	cpc	r1, r20
 828:	55 1f       	adc	r21, r21
 82a:	f2 cf       	rjmp	.-28     	; 0x810 <__fp_split3+0xe>
 82c:	46 95       	lsr	r20
 82e:	f1 df       	rcall	.-30     	; 0x812 <__fp_splitA>
 830:	08 c0       	rjmp	.+16     	; 0x842 <__fp_splitA+0x30>
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	18 06       	cpc	r1, r24
 838:	99 1f       	adc	r25, r25
 83a:	f1 cf       	rjmp	.-30     	; 0x81e <__fp_splitA+0xc>
 83c:	86 95       	lsr	r24
 83e:	71 05       	cpc	r23, r1
 840:	61 05       	cpc	r22, r1
 842:	08 94       	sec
 844:	08 95       	ret

00000846 <__fp_zero>:
 846:	e8 94       	clt

00000848 <__fp_szero>:
 848:	bb 27       	eor	r27, r27
 84a:	66 27       	eor	r22, r22
 84c:	77 27       	eor	r23, r23
 84e:	cb 01       	movw	r24, r22
 850:	97 f9       	bld	r25, 7
 852:	08 95       	ret

00000854 <__mulsf3>:
 854:	0b d0       	rcall	.+22     	; 0x86c <__mulsf3x>
 856:	c4 cf       	rjmp	.-120    	; 0x7e0 <__fp_round>
 858:	b5 df       	rcall	.-150    	; 0x7c4 <__fp_pscA>
 85a:	28 f0       	brcs	.+10     	; 0x866 <__mulsf3+0x12>
 85c:	ba df       	rcall	.-140    	; 0x7d2 <__fp_pscB>
 85e:	18 f0       	brcs	.+6      	; 0x866 <__mulsf3+0x12>
 860:	95 23       	and	r25, r21
 862:	09 f0       	breq	.+2      	; 0x866 <__mulsf3+0x12>
 864:	a6 cf       	rjmp	.-180    	; 0x7b2 <__fp_inf>
 866:	ab cf       	rjmp	.-170    	; 0x7be <__fp_nan>
 868:	11 24       	eor	r1, r1
 86a:	ee cf       	rjmp	.-36     	; 0x848 <__fp_szero>

0000086c <__mulsf3x>:
 86c:	ca df       	rcall	.-108    	; 0x802 <__fp_split3>
 86e:	a0 f3       	brcs	.-24     	; 0x858 <__mulsf3+0x4>

00000870 <__mulsf3_pse>:
 870:	95 9f       	mul	r25, r21
 872:	d1 f3       	breq	.-12     	; 0x868 <__mulsf3+0x14>
 874:	95 0f       	add	r25, r21
 876:	50 e0       	ldi	r21, 0x00	; 0
 878:	55 1f       	adc	r21, r21
 87a:	62 9f       	mul	r22, r18
 87c:	f0 01       	movw	r30, r0
 87e:	72 9f       	mul	r23, r18
 880:	bb 27       	eor	r27, r27
 882:	f0 0d       	add	r31, r0
 884:	b1 1d       	adc	r27, r1
 886:	63 9f       	mul	r22, r19
 888:	aa 27       	eor	r26, r26
 88a:	f0 0d       	add	r31, r0
 88c:	b1 1d       	adc	r27, r1
 88e:	aa 1f       	adc	r26, r26
 890:	64 9f       	mul	r22, r20
 892:	66 27       	eor	r22, r22
 894:	b0 0d       	add	r27, r0
 896:	a1 1d       	adc	r26, r1
 898:	66 1f       	adc	r22, r22
 89a:	82 9f       	mul	r24, r18
 89c:	22 27       	eor	r18, r18
 89e:	b0 0d       	add	r27, r0
 8a0:	a1 1d       	adc	r26, r1
 8a2:	62 1f       	adc	r22, r18
 8a4:	73 9f       	mul	r23, r19
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	62 1f       	adc	r22, r18
 8ac:	83 9f       	mul	r24, r19
 8ae:	a0 0d       	add	r26, r0
 8b0:	61 1d       	adc	r22, r1
 8b2:	22 1f       	adc	r18, r18
 8b4:	74 9f       	mul	r23, r20
 8b6:	33 27       	eor	r19, r19
 8b8:	a0 0d       	add	r26, r0
 8ba:	61 1d       	adc	r22, r1
 8bc:	23 1f       	adc	r18, r19
 8be:	84 9f       	mul	r24, r20
 8c0:	60 0d       	add	r22, r0
 8c2:	21 1d       	adc	r18, r1
 8c4:	82 2f       	mov	r24, r18
 8c6:	76 2f       	mov	r23, r22
 8c8:	6a 2f       	mov	r22, r26
 8ca:	11 24       	eor	r1, r1
 8cc:	9f 57       	subi	r25, 0x7F	; 127
 8ce:	50 40       	sbci	r21, 0x00	; 0
 8d0:	8a f0       	brmi	.+34     	; 0x8f4 <__mulsf3_pse+0x84>
 8d2:	e1 f0       	breq	.+56     	; 0x90c <__mulsf3_pse+0x9c>
 8d4:	88 23       	and	r24, r24
 8d6:	4a f0       	brmi	.+18     	; 0x8ea <__mulsf3_pse+0x7a>
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	bb 1f       	adc	r27, r27
 8de:	66 1f       	adc	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	91 50       	subi	r25, 0x01	; 1
 8e6:	50 40       	sbci	r21, 0x00	; 0
 8e8:	a9 f7       	brne	.-22     	; 0x8d4 <__mulsf3_pse+0x64>
 8ea:	9e 3f       	cpi	r25, 0xFE	; 254
 8ec:	51 05       	cpc	r21, r1
 8ee:	70 f0       	brcs	.+28     	; 0x90c <__mulsf3_pse+0x9c>
 8f0:	60 cf       	rjmp	.-320    	; 0x7b2 <__fp_inf>
 8f2:	aa cf       	rjmp	.-172    	; 0x848 <__fp_szero>
 8f4:	5f 3f       	cpi	r21, 0xFF	; 255
 8f6:	ec f3       	brlt	.-6      	; 0x8f2 <__mulsf3_pse+0x82>
 8f8:	98 3e       	cpi	r25, 0xE8	; 232
 8fa:	dc f3       	brlt	.-10     	; 0x8f2 <__mulsf3_pse+0x82>
 8fc:	86 95       	lsr	r24
 8fe:	77 95       	ror	r23
 900:	67 95       	ror	r22
 902:	b7 95       	ror	r27
 904:	f7 95       	ror	r31
 906:	e7 95       	ror	r30
 908:	9f 5f       	subi	r25, 0xFF	; 255
 90a:	c1 f7       	brne	.-16     	; 0x8fc <__mulsf3_pse+0x8c>
 90c:	fe 2b       	or	r31, r30
 90e:	88 0f       	add	r24, r24
 910:	91 1d       	adc	r25, r1
 912:	96 95       	lsr	r25
 914:	87 95       	ror	r24
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret

0000091a <_exit>:
 91a:	f8 94       	cli

0000091c <__stop_program>:
 91c:	ff cf       	rjmp	.-2      	; 0x91c <__stop_program>
