
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000011  00800060  00800060  00000642  2**0
                  ALLOC
  2 .stab         00000c30  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000834  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__vector_6>
   e:	3b c0       	rjmp	.+118    	; 0x86 <__vector_7>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 37       	cpi	r26, 0x71	; 113
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	fe d0       	rcall	.+508    	; 0x240 <main>
  44:	c2 c2       	rjmp	.+1412   	; 0x5ca <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <servo_init>:
int i;   
unsigned char m0h,m0l,m1h,m1l,m2h,m2l,m3h,m3l,x,y,m4h,m4l,m5h,m5l;
unsigned char temp;
void servo_init()
{
TCCR1A=0x03;
  48:	83 e0       	ldi	r24, 0x03	; 3
  4a:	8f bd       	out	0x2f, r24	; 47
TCCR1B=0x1A;
  4c:	8a e1       	ldi	r24, 0x1A	; 26
  4e:	8e bd       	out	0x2e, r24	; 46
TCNT1H=0x00;
  50:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
  52:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
  54:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
  56:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x19;
  58:	89 e1       	ldi	r24, 0x19	; 25
  5a:	8b bd       	out	0x2b, r24	; 43
OCR1AL=0xC8;
  5c:	88 ec       	ldi	r24, 0xC8	; 200
  5e:	8a bd       	out	0x2a, r24	; 42
//OCR1BH=0x0f;
//OCR1BL=0xA0;
TIMSK=0x18;  
  60:	88 e1       	ldi	r24, 0x18	; 24
  62:	89 bf       	out	0x39, r24	; 57
DDRB=0x3f;
  64:	8f e3       	ldi	r24, 0x3F	; 63
  66:	87 bb       	out	0x17, r24	; 23

sei(); 
  68:	78 94       	sei

}
  6a:	08 95       	ret

0000006c <__vector_6>:

ISR (TIMER1_COMPA_vect) //void timer1_compa_isr(void)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
PORTB=0X00;
  76:	18 ba       	out	0x18, r1	; 24
TCNT1H=0x00;
  78:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
  7a:	1c bc       	out	0x2c, r1	; 44
}
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <__vector_7>:

ISR (TIMER1_COMPB_vect) // void timer1_compb_isr(void)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
switch(i)
  94:	80 91 65 00 	lds	r24, 0x0065
  98:	90 91 66 00 	lds	r25, 0x0066
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	91 05       	cpc	r25, r1
  a0:	49 f1       	breq	.+82     	; 0xf4 <__vector_7+0x6e>
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	91 05       	cpc	r25, r1
  a6:	34 f4       	brge	.+12     	; 0xb4 <__vector_7+0x2e>
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	71 f0       	breq	.+28     	; 0xc8 <__vector_7+0x42>
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <__vector_7+0x2c>
  b0:	52 c0       	rjmp	.+164    	; 0x156 <__vector_7+0xd0>
  b2:	15 c0       	rjmp	.+42     	; 0xde <__vector_7+0x58>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	91 05       	cpc	r25, r1
  b8:	99 f1       	breq	.+102    	; 0x120 <__vector_7+0x9a>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	91 05       	cpc	r25, r1
  be:	2c f1       	brlt	.+74     	; 0x10a <__vector_7+0x84>
  c0:	05 97       	sbiw	r24, 0x05	; 5
  c2:	09 f0       	breq	.+2      	; 0xc6 <__vector_7+0x40>
  c4:	48 c0       	rjmp	.+144    	; 0x156 <__vector_7+0xd0>
  c6:	3b c0       	rjmp	.+118    	; 0x13e <__vector_7+0xb8>
{
case 0:
 OCR1BH=m0h;     
  c8:	80 91 61 00 	lds	r24, 0x0061
  cc:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m0l;     
  ce:	80 91 6a 00 	lds	r24, 0x006A
  d2:	88 bd       	out	0x28, r24	; 40
 PORTB=0X01;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	88 bb       	out	0x18, r24	; 24
 i=1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2b c0       	rjmp	.+86     	; 0x134 <__vector_7+0xae>
 break ;  
 
case 1:
 OCR1BH=m1h;       
  de:	80 91 64 00 	lds	r24, 0x0064
  e2:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m1l;      
  e4:	80 91 70 00 	lds	r24, 0x0070
  e8:	88 bd       	out	0x28, r24	; 40
 PORTB=0X02;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	88 bb       	out	0x18, r24	; 24
 i=2;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	20 c0       	rjmp	.+64     	; 0x134 <__vector_7+0xae>
 break ; 
 
case 2:
 OCR1BH=m2h;              
  f4:	80 91 6e 00 	lds	r24, 0x006E
  f8:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m2l;                
  fa:	80 91 6b 00 	lds	r24, 0x006B
  fe:	88 bd       	out	0x28, r24	; 40
 PORTB=0X04;
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	88 bb       	out	0x18, r24	; 24
 i=3;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	15 c0       	rjmp	.+42     	; 0x134 <__vector_7+0xae>
 break ;
 
case 3:
 OCR1BH=m3h;   
 10a:	80 91 67 00 	lds	r24, 0x0067
 10e:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m3l;      
 110:	80 91 69 00 	lds	r24, 0x0069
 114:	88 bd       	out	0x28, r24	; 40
 PORTB=0X08;
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	88 bb       	out	0x18, r24	; 24
 i=4;
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0a c0       	rjmp	.+20     	; 0x134 <__vector_7+0xae>
 break ;

case 4:
 OCR1BH=m4h;   
 120:	80 91 68 00 	lds	r24, 0x0068
 124:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m4l;      
 126:	80 91 6d 00 	lds	r24, 0x006D
 12a:	88 bd       	out	0x28, r24	; 40
 PORTB=0X10;
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	88 bb       	out	0x18, r24	; 24
 i=5;
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 66 00 	sts	0x0066, r25
 138:	80 93 65 00 	sts	0x0065, r24
 13c:	0c c0       	rjmp	.+24     	; 0x156 <__vector_7+0xd0>
 break ;
 
case 5:
 OCR1BH=m5h;   
 13e:	80 91 6f 00 	lds	r24, 0x006F
 142:	89 bd       	out	0x29, r24	; 41
 OCR1BL=m5l;      
 144:	80 91 63 00 	lds	r24, 0x0063
 148:	88 bd       	out	0x28, r24	; 40
 PORTB=0X20;
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	88 bb       	out	0x18, r24	; 24
 i=0;
 14e:	10 92 66 00 	sts	0x0066, r1
 152:	10 92 65 00 	sts	0x0065, r1
 break ; 
 } 
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <mov>:

void mov(float value,int m)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ea 01       	movw	r28, r20
        unsigned int va;
        va=2600+(value+50)*11.843;  //for degree format
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	48 e4       	ldi	r20, 0x48	; 72
 170:	52 e4       	ldi	r21, 0x42	; 66
 172:	e7 d0       	rcall	.+462    	; 0x342 <__addsf3>
 174:	2e ee       	ldi	r18, 0xEE	; 238
 176:	3c e7       	ldi	r19, 0x7C	; 124
 178:	4d e3       	ldi	r20, 0x3D	; 61
 17a:	51 e4       	ldi	r21, 0x41	; 65
 17c:	c3 d1       	rcall	.+902    	; 0x504 <__mulsf3>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e8       	ldi	r19, 0x80	; 128
 182:	42 e2       	ldi	r20, 0x22	; 34
 184:	55 e4       	ldi	r21, 0x45	; 69
 186:	dd d0       	rcall	.+442    	; 0x342 <__addsf3>
 188:	40 d1       	rcall	.+640    	; 0x40a <__fixunssfsi>
 18a:	36 2f       	mov	r19, r22
 18c:	27 2f       	mov	r18, r23
		//va=795+value*15;      //for potentio meter format
        if(m==2)              
 18e:	c2 30       	cpi	r28, 0x02	; 2
 190:	d1 05       	cpc	r29, r1
 192:	39 f4       	brne	.+14     	; 0x1a2 <mov+0x3e>
        {
                m1l=va;
 194:	60 93 70 00 	sts	0x0070, r22
                temp=va>>8;
 198:	70 93 62 00 	sts	0x0062, r23
                m1h=temp;
 19c:	70 93 64 00 	sts	0x0064, r23
 1a0:	1d c0       	rjmp	.+58     	; 0x1dc <mov+0x78>
        }
        if(m==3)            
 1a2:	c3 30       	cpi	r28, 0x03	; 3
 1a4:	d1 05       	cpc	r29, r1
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <mov+0x52>
        {
                m2l=va;
 1a8:	60 93 6b 00 	sts	0x006B, r22
                temp=va>>8;
 1ac:	70 93 62 00 	sts	0x0062, r23
                m2h=temp;
 1b0:	70 93 6e 00 	sts	0x006E, r23
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <mov+0x8c>
        }
        if(m==0)       
 1b6:	20 97       	sbiw	r28, 0x00	; 0
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <mov+0x64>
        {
                m5l=va;
 1ba:	60 93 63 00 	sts	0x0063, r22
                temp=va>>8;
 1be:	70 93 62 00 	sts	0x0062, r23
                m5h=temp;
 1c2:	70 93 6f 00 	sts	0x006F, r23
 1c6:	1c c0       	rjmp	.+56     	; 0x200 <mov+0x9c>
        }
        if(m==1)     
 1c8:	c1 30       	cpi	r28, 0x01	; 1
 1ca:	d1 05       	cpc	r29, r1
 1cc:	39 f4       	brne	.+14     	; 0x1dc <mov+0x78>
        {
                m0l=va;
 1ce:	60 93 6a 00 	sts	0x006A, r22
                temp=va>>8;
 1d2:	70 93 62 00 	sts	0x0062, r23
                m0h=temp;
 1d6:	70 93 61 00 	sts	0x0061, r23
 1da:	12 c0       	rjmp	.+36     	; 0x200 <mov+0x9c>
        }
        if(m==4)     
 1dc:	c4 30       	cpi	r28, 0x04	; 4
 1de:	d1 05       	cpc	r29, r1
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <mov+0x8c>
        {
                m3l=va;
 1e2:	30 93 69 00 	sts	0x0069, r19
                temp=va>>8;
 1e6:	20 93 62 00 	sts	0x0062, r18
                m3h=temp;
 1ea:	20 93 67 00 	sts	0x0067, r18
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <mov+0x9c>
        }
        if(m==5)     
 1f0:	25 97       	sbiw	r28, 0x05	; 5
 1f2:	31 f4       	brne	.+12     	; 0x200 <mov+0x9c>
        {
                m4l=va;
 1f4:	30 93 6d 00 	sts	0x006D, r19
                temp=va>>8;
 1f8:	20 93 62 00 	sts	0x0062, r18
                m4h=temp;
 1fc:	20 93 68 00 	sts	0x0068, r18
        }		
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <stop>:
	#define DELAY 300

	
	stop()
	{
		mov(90,0);		//LR
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	84 eb       	ldi	r24, 0xB4	; 180
 20c:	92 e4       	ldi	r25, 0x42	; 66
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	a8 df       	rcall	.-176    	; 0x164 <mov>
		mov(80,1);		//LL
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	80 ea       	ldi	r24, 0xA0	; 160
 21a:	92 e4       	ldi	r25, 0x42	; 66
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	a1 df       	rcall	.-190    	; 0x164 <mov>
		mov(90,2);		//UR
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	84 eb       	ldi	r24, 0xB4	; 180
 228:	92 e4       	ldi	r25, 0x42	; 66
 22a:	42 e0       	ldi	r20, 0x02	; 2
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	9a df       	rcall	.-204    	; 0x164 <mov>
		mov(90,3);		//UL
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	84 eb       	ldi	r24, 0xB4	; 180
 236:	92 e4       	ldi	r25, 0x42	; 66
 238:	43 e0       	ldi	r20, 0x03	; 3
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	93 df       	rcall	.-218    	; 0x164 <mov>
	}
 23e:	08 95       	ret

00000240 <main>:

	int main()
	 {
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	 
	 DDRC=0x00;
 244:	14 ba       	out	0x14, r1	; 20
	 PORTC=0x0f;
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	85 bb       	out	0x15, r24	; 21
	 
	 servo_init();
 24a:	fe de       	rcall	.-516    	; 0x48 <servo_init>
	 
		stop();
 24c:	dc df       	rcall	.-72     	; 0x206 <stop>
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 252:	2c e2       	ldi	r18, 0x2C	; 44
 254:	31 e0       	ldi	r19, 0x01	; 1
 256:	f9 01       	movw	r30, r18
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25e:	d9 f7       	brne	.-10     	; 0x256 <main+0x16>
 260:	cc e2       	ldi	r28, 0x2C	; 44
 262:	d1 e0       	ldi	r29, 0x01	; 1
	 _delay_ms(2000);
	 
	 while(1)
	   {
		if((PINC & 0x01) == 0x00)
 264:	98 99       	sbic	0x13, 0	; 19
 266:	fe cf       	rjmp	.-4      	; 0x264 <main+0x24>
		{
			while((PINC & 0x01)==0x00);
 268:	98 9b       	sbis	0x13, 0	; 19
 26a:	fe cf       	rjmp	.-4      	; 0x268 <main+0x28>

// **************************************** Flip **************************************
			
			mov(200,3);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	88 e4       	ldi	r24, 0x48	; 72
 272:	93 e4       	ldi	r25, 0x43	; 67
 274:	43 e0       	ldi	r20, 0x03	; 3
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	75 df       	rcall	.-278    	; 0x164 <mov>
			mov(-40,2);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	92 ec       	ldi	r25, 0xC2	; 194
 282:	42 e0       	ldi	r20, 0x02	; 2
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	6e df       	rcall	.-292    	; 0x164 <mov>
 288:	80 e2       	ldi	r24, 0x20	; 32
 28a:	9e e4       	ldi	r25, 0x4E	; 78
 28c:	fe 01       	movw	r30, r28
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 292:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 294:	d9 f7       	brne	.-10     	; 0x28c <main+0x4c>
			
			_delay_ms(2000);
			
			mov(125,0);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	8a ef       	ldi	r24, 0xFA	; 250
 29c:	92 e4       	ldi	r25, 0x42	; 66
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	60 df       	rcall	.-320    	; 0x164 <mov>
			mov(55,1);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	8c e5       	ldi	r24, 0x5C	; 92
 2aa:	92 e4       	ldi	r25, 0x42	; 66
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	59 df       	rcall	.-334    	; 0x164 <mov>
 2b2:	88 e8       	ldi	r24, 0x88	; 136
 2b4:	93 e1       	ldi	r25, 0x13	; 19
 2b6:	fe 01       	movw	r30, r28
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <main+0x76>
			_delay_ms(500);
			mov(55,0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	8c e5       	ldi	r24, 0x5C	; 92
 2c6:	92 e4       	ldi	r25, 0x42	; 66
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	4b df       	rcall	.-362    	; 0x164 <mov>
			mov(125,1);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	8a ef       	ldi	r24, 0xFA	; 250
 2d4:	92 e4       	ldi	r25, 0x42	; 66
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	44 df       	rcall	.-376    	; 0x164 <mov>
 2dc:	88 e8       	ldi	r24, 0x88	; 136
 2de:	93 e1       	ldi	r25, 0x13	; 19
 2e0:	fe 01       	movw	r30, r28
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e8:	d9 f7       	brne	.-10     	; 0x2e0 <main+0xa0>
			_delay_ms(500);
			mov(90,0);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	84 eb       	ldi	r24, 0xB4	; 180
 2f0:	92 e4       	ldi	r25, 0x42	; 66
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	36 df       	rcall	.-404    	; 0x164 <mov>
			mov(90,1);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	84 eb       	ldi	r24, 0xB4	; 180
 2fe:	92 e4       	ldi	r25, 0x42	; 66
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	2f df       	rcall	.-418    	; 0x164 <mov>
 306:	88 e8       	ldi	r24, 0x88	; 136
 308:	93 e1       	ldi	r25, 0x13	; 19
 30a:	fe 01       	movw	r30, r28
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 310:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 312:	d9 f7       	brne	.-10     	; 0x30a <main+0xca>
			_delay_ms(500);
			
			mov(90,3);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	84 eb       	ldi	r24, 0xB4	; 180
 31a:	92 e4       	ldi	r25, 0x42	; 66
 31c:	43 e0       	ldi	r20, 0x03	; 3
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	21 df       	rcall	.-446    	; 0x164 <mov>
			mov(90,2);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	84 eb       	ldi	r24, 0xB4	; 180
 328:	92 e4       	ldi	r25, 0x42	; 66
 32a:	42 e0       	ldi	r20, 0x02	; 2
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	1a df       	rcall	.-460    	; 0x164 <mov>
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	97 e2       	ldi	r25, 0x27	; 39
 334:	fe 01       	movw	r30, r28
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33c:	d9 f7       	brne	.-10     	; 0x334 <main+0xf4>
 33e:	92 cf       	rjmp	.-220    	; 0x264 <main+0x24>

00000340 <__subsf3>:
 340:	50 58       	subi	r21, 0x80	; 128

00000342 <__addsf3>:
 342:	bb 27       	eor	r27, r27
 344:	aa 27       	eor	r26, r26
 346:	0e d0       	rcall	.+28     	; 0x364 <__addsf3x>
 348:	a3 c0       	rjmp	.+326    	; 0x490 <__fp_round>
 34a:	94 d0       	rcall	.+296    	; 0x474 <__fp_pscA>
 34c:	30 f0       	brcs	.+12     	; 0x35a <__addsf3+0x18>
 34e:	99 d0       	rcall	.+306    	; 0x482 <__fp_pscB>
 350:	20 f0       	brcs	.+8      	; 0x35a <__addsf3+0x18>
 352:	31 f4       	brne	.+12     	; 0x360 <__addsf3+0x1e>
 354:	9f 3f       	cpi	r25, 0xFF	; 255
 356:	11 f4       	brne	.+4      	; 0x35c <__addsf3+0x1a>
 358:	1e f4       	brtc	.+6      	; 0x360 <__addsf3+0x1e>
 35a:	89 c0       	rjmp	.+274    	; 0x46e <__fp_nan>
 35c:	0e f4       	brtc	.+2      	; 0x360 <__addsf3+0x1e>
 35e:	e0 95       	com	r30
 360:	e7 fb       	bst	r30, 7
 362:	7f c0       	rjmp	.+254    	; 0x462 <__fp_inf>

00000364 <__addsf3x>:
 364:	e9 2f       	mov	r30, r25
 366:	a5 d0       	rcall	.+330    	; 0x4b2 <__fp_split3>
 368:	80 f3       	brcs	.-32     	; 0x34a <__addsf3+0x8>
 36a:	ba 17       	cp	r27, r26
 36c:	62 07       	cpc	r22, r18
 36e:	73 07       	cpc	r23, r19
 370:	84 07       	cpc	r24, r20
 372:	95 07       	cpc	r25, r21
 374:	18 f0       	brcs	.+6      	; 0x37c <__addsf3x+0x18>
 376:	71 f4       	brne	.+28     	; 0x394 <__addsf3x+0x30>
 378:	9e f5       	brtc	.+102    	; 0x3e0 <__addsf3x+0x7c>
 37a:	bd c0       	rjmp	.+378    	; 0x4f6 <__fp_zero>
 37c:	0e f4       	brtc	.+2      	; 0x380 <__addsf3x+0x1c>
 37e:	e0 95       	com	r30
 380:	0b 2e       	mov	r0, r27
 382:	ba 2f       	mov	r27, r26
 384:	a0 2d       	mov	r26, r0
 386:	0b 01       	movw	r0, r22
 388:	b9 01       	movw	r22, r18
 38a:	90 01       	movw	r18, r0
 38c:	0c 01       	movw	r0, r24
 38e:	ca 01       	movw	r24, r20
 390:	a0 01       	movw	r20, r0
 392:	11 24       	eor	r1, r1
 394:	ff 27       	eor	r31, r31
 396:	59 1b       	sub	r21, r25
 398:	99 f0       	breq	.+38     	; 0x3c0 <__addsf3x+0x5c>
 39a:	59 3f       	cpi	r21, 0xF9	; 249
 39c:	50 f4       	brcc	.+20     	; 0x3b2 <__addsf3x+0x4e>
 39e:	50 3e       	cpi	r21, 0xE0	; 224
 3a0:	68 f1       	brcs	.+90     	; 0x3fc <__addsf3x+0x98>
 3a2:	1a 16       	cp	r1, r26
 3a4:	f0 40       	sbci	r31, 0x00	; 0
 3a6:	a2 2f       	mov	r26, r18
 3a8:	23 2f       	mov	r18, r19
 3aa:	34 2f       	mov	r19, r20
 3ac:	44 27       	eor	r20, r20
 3ae:	58 5f       	subi	r21, 0xF8	; 248
 3b0:	f3 cf       	rjmp	.-26     	; 0x398 <__addsf3x+0x34>
 3b2:	46 95       	lsr	r20
 3b4:	37 95       	ror	r19
 3b6:	27 95       	ror	r18
 3b8:	a7 95       	ror	r26
 3ba:	f0 40       	sbci	r31, 0x00	; 0
 3bc:	53 95       	inc	r21
 3be:	c9 f7       	brne	.-14     	; 0x3b2 <__addsf3x+0x4e>
 3c0:	7e f4       	brtc	.+30     	; 0x3e0 <__addsf3x+0x7c>
 3c2:	1f 16       	cp	r1, r31
 3c4:	ba 0b       	sbc	r27, r26
 3c6:	62 0b       	sbc	r22, r18
 3c8:	73 0b       	sbc	r23, r19
 3ca:	84 0b       	sbc	r24, r20
 3cc:	ba f0       	brmi	.+46     	; 0x3fc <__addsf3x+0x98>
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	a1 f0       	breq	.+40     	; 0x3fa <__addsf3x+0x96>
 3d2:	ff 0f       	add	r31, r31
 3d4:	bb 1f       	adc	r27, r27
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	c2 f7       	brpl	.-16     	; 0x3ce <__addsf3x+0x6a>
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <__addsf3x+0x98>
 3e0:	ba 0f       	add	r27, r26
 3e2:	62 1f       	adc	r22, r18
 3e4:	73 1f       	adc	r23, r19
 3e6:	84 1f       	adc	r24, r20
 3e8:	48 f4       	brcc	.+18     	; 0x3fc <__addsf3x+0x98>
 3ea:	87 95       	ror	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b7 95       	ror	r27
 3f2:	f7 95       	ror	r31
 3f4:	9e 3f       	cpi	r25, 0xFE	; 254
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <__addsf3x+0x96>
 3f8:	b3 cf       	rjmp	.-154    	; 0x360 <__addsf3+0x1e>
 3fa:	93 95       	inc	r25
 3fc:	88 0f       	add	r24, r24
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__addsf3x+0x9e>
 400:	99 27       	eor	r25, r25
 402:	ee 0f       	add	r30, r30
 404:	97 95       	ror	r25
 406:	87 95       	ror	r24
 408:	08 95       	ret

0000040a <__fixunssfsi>:
 40a:	5b d0       	rcall	.+182    	; 0x4c2 <__fp_splitA>
 40c:	88 f0       	brcs	.+34     	; 0x430 <__fixunssfsi+0x26>
 40e:	9f 57       	subi	r25, 0x7F	; 127
 410:	90 f0       	brcs	.+36     	; 0x436 <__fixunssfsi+0x2c>
 412:	b9 2f       	mov	r27, r25
 414:	99 27       	eor	r25, r25
 416:	b7 51       	subi	r27, 0x17	; 23
 418:	a0 f0       	brcs	.+40     	; 0x442 <__fixunssfsi+0x38>
 41a:	d1 f0       	breq	.+52     	; 0x450 <__fixunssfsi+0x46>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	1a f0       	brmi	.+6      	; 0x42c <__fixunssfsi+0x22>
 426:	ba 95       	dec	r27
 428:	c9 f7       	brne	.-14     	; 0x41c <__fixunssfsi+0x12>
 42a:	12 c0       	rjmp	.+36     	; 0x450 <__fixunssfsi+0x46>
 42c:	b1 30       	cpi	r27, 0x01	; 1
 42e:	81 f0       	breq	.+32     	; 0x450 <__fixunssfsi+0x46>
 430:	62 d0       	rcall	.+196    	; 0x4f6 <__fp_zero>
 432:	b1 e0       	ldi	r27, 0x01	; 1
 434:	08 95       	ret
 436:	5f c0       	rjmp	.+190    	; 0x4f6 <__fp_zero>
 438:	67 2f       	mov	r22, r23
 43a:	78 2f       	mov	r23, r24
 43c:	88 27       	eor	r24, r24
 43e:	b8 5f       	subi	r27, 0xF8	; 248
 440:	39 f0       	breq	.+14     	; 0x450 <__fixunssfsi+0x46>
 442:	b9 3f       	cpi	r27, 0xF9	; 249
 444:	cc f3       	brlt	.-14     	; 0x438 <__fixunssfsi+0x2e>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b3 95       	inc	r27
 44e:	d9 f7       	brne	.-10     	; 0x446 <__fixunssfsi+0x3c>
 450:	3e f4       	brtc	.+14     	; 0x460 <__stack+0x1>
 452:	90 95       	com	r25
 454:	80 95       	com	r24
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	08 95       	ret

00000462 <__fp_inf>:
 462:	97 f9       	bld	r25, 7
 464:	9f 67       	ori	r25, 0x7F	; 127
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	08 95       	ret

0000046e <__fp_nan>:
 46e:	9f ef       	ldi	r25, 0xFF	; 255
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	08 95       	ret

00000474 <__fp_pscA>:
 474:	00 24       	eor	r0, r0
 476:	0a 94       	dec	r0
 478:	16 16       	cp	r1, r22
 47a:	17 06       	cpc	r1, r23
 47c:	18 06       	cpc	r1, r24
 47e:	09 06       	cpc	r0, r25
 480:	08 95       	ret

00000482 <__fp_pscB>:
 482:	00 24       	eor	r0, r0
 484:	0a 94       	dec	r0
 486:	12 16       	cp	r1, r18
 488:	13 06       	cpc	r1, r19
 48a:	14 06       	cpc	r1, r20
 48c:	05 06       	cpc	r0, r21
 48e:	08 95       	ret

00000490 <__fp_round>:
 490:	09 2e       	mov	r0, r25
 492:	03 94       	inc	r0
 494:	00 0c       	add	r0, r0
 496:	11 f4       	brne	.+4      	; 0x49c <__fp_round+0xc>
 498:	88 23       	and	r24, r24
 49a:	52 f0       	brmi	.+20     	; 0x4b0 <__fp_round+0x20>
 49c:	bb 0f       	add	r27, r27
 49e:	40 f4       	brcc	.+16     	; 0x4b0 <__fp_round+0x20>
 4a0:	bf 2b       	or	r27, r31
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__fp_round+0x18>
 4a4:	60 ff       	sbrs	r22, 0
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__fp_round+0x20>
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__fp_split3>:
 4b2:	57 fd       	sbrc	r21, 7
 4b4:	90 58       	subi	r25, 0x80	; 128
 4b6:	44 0f       	add	r20, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	59 f0       	breq	.+22     	; 0x4d2 <__fp_splitA+0x10>
 4bc:	5f 3f       	cpi	r21, 0xFF	; 255
 4be:	71 f0       	breq	.+28     	; 0x4dc <__fp_splitA+0x1a>
 4c0:	47 95       	ror	r20

000004c2 <__fp_splitA>:
 4c2:	88 0f       	add	r24, r24
 4c4:	97 fb       	bst	r25, 7
 4c6:	99 1f       	adc	r25, r25
 4c8:	61 f0       	breq	.+24     	; 0x4e2 <__fp_splitA+0x20>
 4ca:	9f 3f       	cpi	r25, 0xFF	; 255
 4cc:	79 f0       	breq	.+30     	; 0x4ec <__fp_splitA+0x2a>
 4ce:	87 95       	ror	r24
 4d0:	08 95       	ret
 4d2:	12 16       	cp	r1, r18
 4d4:	13 06       	cpc	r1, r19
 4d6:	14 06       	cpc	r1, r20
 4d8:	55 1f       	adc	r21, r21
 4da:	f2 cf       	rjmp	.-28     	; 0x4c0 <__fp_split3+0xe>
 4dc:	46 95       	lsr	r20
 4de:	f1 df       	rcall	.-30     	; 0x4c2 <__fp_splitA>
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__fp_splitA+0x30>
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	18 06       	cpc	r1, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	f1 cf       	rjmp	.-30     	; 0x4ce <__fp_splitA+0xc>
 4ec:	86 95       	lsr	r24
 4ee:	71 05       	cpc	r23, r1
 4f0:	61 05       	cpc	r22, r1
 4f2:	08 94       	sec
 4f4:	08 95       	ret

000004f6 <__fp_zero>:
 4f6:	e8 94       	clt

000004f8 <__fp_szero>:
 4f8:	bb 27       	eor	r27, r27
 4fa:	66 27       	eor	r22, r22
 4fc:	77 27       	eor	r23, r23
 4fe:	cb 01       	movw	r24, r22
 500:	97 f9       	bld	r25, 7
 502:	08 95       	ret

00000504 <__mulsf3>:
 504:	0b d0       	rcall	.+22     	; 0x51c <__mulsf3x>
 506:	c4 cf       	rjmp	.-120    	; 0x490 <__fp_round>
 508:	b5 df       	rcall	.-150    	; 0x474 <__fp_pscA>
 50a:	28 f0       	brcs	.+10     	; 0x516 <__mulsf3+0x12>
 50c:	ba df       	rcall	.-140    	; 0x482 <__fp_pscB>
 50e:	18 f0       	brcs	.+6      	; 0x516 <__mulsf3+0x12>
 510:	95 23       	and	r25, r21
 512:	09 f0       	breq	.+2      	; 0x516 <__mulsf3+0x12>
 514:	a6 cf       	rjmp	.-180    	; 0x462 <__fp_inf>
 516:	ab cf       	rjmp	.-170    	; 0x46e <__fp_nan>
 518:	11 24       	eor	r1, r1
 51a:	ee cf       	rjmp	.-36     	; 0x4f8 <__fp_szero>

0000051c <__mulsf3x>:
 51c:	ca df       	rcall	.-108    	; 0x4b2 <__fp_split3>
 51e:	a0 f3       	brcs	.-24     	; 0x508 <__mulsf3+0x4>

00000520 <__mulsf3_pse>:
 520:	95 9f       	mul	r25, r21
 522:	d1 f3       	breq	.-12     	; 0x518 <__mulsf3+0x14>
 524:	95 0f       	add	r25, r21
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	55 1f       	adc	r21, r21
 52a:	62 9f       	mul	r22, r18
 52c:	f0 01       	movw	r30, r0
 52e:	72 9f       	mul	r23, r18
 530:	bb 27       	eor	r27, r27
 532:	f0 0d       	add	r31, r0
 534:	b1 1d       	adc	r27, r1
 536:	63 9f       	mul	r22, r19
 538:	aa 27       	eor	r26, r26
 53a:	f0 0d       	add	r31, r0
 53c:	b1 1d       	adc	r27, r1
 53e:	aa 1f       	adc	r26, r26
 540:	64 9f       	mul	r22, r20
 542:	66 27       	eor	r22, r22
 544:	b0 0d       	add	r27, r0
 546:	a1 1d       	adc	r26, r1
 548:	66 1f       	adc	r22, r22
 54a:	82 9f       	mul	r24, r18
 54c:	22 27       	eor	r18, r18
 54e:	b0 0d       	add	r27, r0
 550:	a1 1d       	adc	r26, r1
 552:	62 1f       	adc	r22, r18
 554:	73 9f       	mul	r23, r19
 556:	b0 0d       	add	r27, r0
 558:	a1 1d       	adc	r26, r1
 55a:	62 1f       	adc	r22, r18
 55c:	83 9f       	mul	r24, r19
 55e:	a0 0d       	add	r26, r0
 560:	61 1d       	adc	r22, r1
 562:	22 1f       	adc	r18, r18
 564:	74 9f       	mul	r23, r20
 566:	33 27       	eor	r19, r19
 568:	a0 0d       	add	r26, r0
 56a:	61 1d       	adc	r22, r1
 56c:	23 1f       	adc	r18, r19
 56e:	84 9f       	mul	r24, r20
 570:	60 0d       	add	r22, r0
 572:	21 1d       	adc	r18, r1
 574:	82 2f       	mov	r24, r18
 576:	76 2f       	mov	r23, r22
 578:	6a 2f       	mov	r22, r26
 57a:	11 24       	eor	r1, r1
 57c:	9f 57       	subi	r25, 0x7F	; 127
 57e:	50 40       	sbci	r21, 0x00	; 0
 580:	8a f0       	brmi	.+34     	; 0x5a4 <__mulsf3_pse+0x84>
 582:	e1 f0       	breq	.+56     	; 0x5bc <__mulsf3_pse+0x9c>
 584:	88 23       	and	r24, r24
 586:	4a f0       	brmi	.+18     	; 0x59a <__mulsf3_pse+0x7a>
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	bb 1f       	adc	r27, r27
 58e:	66 1f       	adc	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	91 50       	subi	r25, 0x01	; 1
 596:	50 40       	sbci	r21, 0x00	; 0
 598:	a9 f7       	brne	.-22     	; 0x584 <__mulsf3_pse+0x64>
 59a:	9e 3f       	cpi	r25, 0xFE	; 254
 59c:	51 05       	cpc	r21, r1
 59e:	70 f0       	brcs	.+28     	; 0x5bc <__mulsf3_pse+0x9c>
 5a0:	60 cf       	rjmp	.-320    	; 0x462 <__fp_inf>
 5a2:	aa cf       	rjmp	.-172    	; 0x4f8 <__fp_szero>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	ec f3       	brlt	.-6      	; 0x5a2 <__mulsf3_pse+0x82>
 5a8:	98 3e       	cpi	r25, 0xE8	; 232
 5aa:	dc f3       	brlt	.-10     	; 0x5a2 <__mulsf3_pse+0x82>
 5ac:	86 95       	lsr	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f7 95       	ror	r31
 5b6:	e7 95       	ror	r30
 5b8:	9f 5f       	subi	r25, 0xFF	; 255
 5ba:	c1 f7       	brne	.-16     	; 0x5ac <__mulsf3_pse+0x8c>
 5bc:	fe 2b       	or	r31, r30
 5be:	88 0f       	add	r24, r24
 5c0:	91 1d       	adc	r25, r1
 5c2:	96 95       	lsr	r25
 5c4:	87 95       	ror	r24
 5c6:	97 f9       	bld	r25, 7
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
